{"version":3,"sources":["view/components/Tweet/Tweet.module.css","util/bindKeyboard.js","util/twitter/sha1.js","view/components/Tweet/Tweet.js","view/components/TweetListPage/TweetListPage.js","util/twitter/utils.js","util/credentials.js","util/twitter/base64.js","util/twitter/twitter_oauth.js","util/twitter/twitter_api.js","util/loginManager.js","view/components/LoginPage/LoginPage.js","view/app.js","index.js","view/components/LoginPage/LoginPage.module.css"],"names":["module","exports","tweet","col1","col2","row1","name","time","row2","screenName","row3","MyComponent","K_sha2","K_sha512","r_sha3","rc_sha3","Tweet","_ref","undefined","react_default","a","createElement","className","css","src","avatar","alt","createdAt","text","image","VirtualizeSwipeableViews","virtualize","SwipeableViews","_React$Component","BindKeyboard","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","handleKeyDown","event","action","_this$props","props","_this$props$axis","axis","children","onChangeIndex","slideCount","keycode","indexLatest","index","indexNew","mod","React","Children","count","setState","handleChangeIndex","n","m","q","inherits","createClass","key","value","nextProps","_this$props2","other","objectWithoutProperties","react_event_listener_cjs_default","target","onKeyDown","assign","Component","utils","queryStringToObject","query","parameters","parts","split","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","pair","err","return","prettyDate","date","Date","diff","getTime","day_diff","Math","floor","isNaN","ceil","SUPPORTED_ALGS","TWO_PWR_32","Int_64","msint_32","lsint_32","highOrder","lowOrder","packed2hex","packed","outputLength","bigEndianMod","formatOpts","i","srcByte","shiftModifier","str","charAt","toUpperCase","packed2b64","j","triplet","int1","int2","packed2bytes","String","fromCharCode","packed2arraybuffer","arrView","retVal","ArrayBuffer","Uint8Array","getOutputOpts","options","outputOptions","outputUpper","b64Pad","shakeLen","hasOwnProperty","Error","getStrConverter","format","utfType","existingBin","existingBinLen","existingPacked","existingPackedLen","num","intOffset","byteOffset","existingByteLen","parseInt","substr","push","binLen","hex2packed","codePnt","codePntArr","transposeBytes","byteCnt","charCodeAt","str2packed","tmpInt","strPart","firstEqual","search","indexOf","replace","b642packed","bytes2packed","ignore","arr","byteLength","arraybuffer2packed","rotl_32","x","rotl_64","rotr_32","rotr_64","tmp","shr_32","shr_64","parity_32","y","z","ch_32","ch_64","maj_32","maj_64","sigma0_32","sigma0_64","rotr28","rotr34","rotr39","sigma1_32","sigma1_64","rotr14","rotr18","rotr41","gamma0_32","gamma0_64","rotr1","rotr8","shr7","gamma1_32","gamma1_64","rotr19","rotr61","shr6","safeAdd_32_2","b","lsw","safeAdd_32_4","c","d","safeAdd_32_5","e","safeAdd_64_2","msw","safeAdd_64_4","safeAdd_64_5","xor_64_2","getNewState","variant","H_trunc","H_full","lastIndexOf","roundSHA1","block","H","T","t","W","ch","parity","maj","rotl","safeAdd_2","safeAdd_5","finalizeSHA1","remainder","remainderBinLen","processedBinLen","outputLen","appendedMessageLength","offset","totalLen","slice","roundSHA2","f","g","h","T1","T2","numRounds","binaryStringMult","safeAdd_4","gamma0","gamma1","sigma0","sigma1","Int","K","Number","roundSHA3","round","B","C","D","jsSHA","inputFormat","intermediateState","converterFunc","outputBinLen","variantBlockSize","roundFunc","finalizeFunc","stateCloneFunc","inputOptions","processedLen","remainderLen","shaVariant","hmacKeySet","keyWithIPad","keyWithOPad","updatedCalled","isSHAKE","binaryStringInc","finalizeSHA2","delimiter","clone","cloneSHA3State","blockSize","temp","state_offset","remainderIntLen","finalizeSHA3","setHMACKey","convertRet","keyBinLen","keyToUse","blockByteSize","lastArrayIndex","keyConverterFunc","update","srcString","chunkBinLen","chunkIntLen","chunk","updateProcessedLen","variantBlockIntInc","getHash","formatFunc","finalizedState","binarray","getHMAC","firstHash","consumerKey","consumerSecret","Base64","btoa","charCode","output","map","oAuthSigningKey","consumer_secret","percentEncode","oAuthSignature","base_string","signing_key","string","secret","shaObj","hmac_sha1","encodeURIComponent","character","toString","encodeObjectToParamStr","paramObj","paramObjKeys","keys","len","sort","paramStr","decodeURIComponent","twitterOAuth","getAuthorizationForRequestToken","httpMethod","baseUrl","fitbitAppCallback","timestamp","now","nonce","callback","signature","method","url","oauth_callback","oauth_consumer_key","oauth_nonce","oauth_signature_method","oauth_timestamp","oauth_version","genSortedParamStrForRequestToken","oAuthBaseStringForRequestToken","getAuthorizationForAccessToken","requestToken","verifier","token","oauth_token","oauth_verifier","genSortedParamStrForAccessToken","oAuthBaseStringForAccessToken","getAuthorizationForProtectedResource","accessToken","accessTokenSecret","additionalParams","access_token_secret","objectSpread","genSortedParamStrForProtectedResource","oAuthBaseStringForProtectedResource","requestTokenUrl","accessTokenUrl","homeTimelineUrl","likeTweetUrl","retweetUrl","twitterApi","getRequestToken","newCallbackUrl","fetch","headers","Authorization","then","res","queryText","result","processRequestTokenResultQueryText","catch","error","console","log","toLocaleString","getAccessToken","processAccessTokenResultQueryText","getHomeTimeline","likeTweet","tweetIdToLike","id","retweet","tweetIdToRetweet","Content-Type","callbackUrl","LoginPage","onLoginClicked","window","location","href","loginPage","centered","title","loginButton","onClick","App","LoginPage_LoginPage","ReactDOM","render","view_app","document","getElementById"],"mappings":"uEACAA,EAAAC,QAAA,CAAkBC,MAAA,qBAAAC,KAAA,oBAAAC,KAAA,oBAAAC,KAAA,oBAAAC,KAAA,oBAAAC,KAAA,oBAAAC,KAAA,oBAAAC,WAAA,0BAAAC,KAAA,wSCImBC,ECguCjCC,EAAQC,EAAUC,EAAQC,kBCluCjBC,EAAQ,SAAAC,GAAa,IAAXf,EAAWe,EAAXf,MACrB,YAAcgB,IAAVhB,EACKiB,EAAAC,EAAAC,cAAA,0BAGPF,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAIrB,OAClBiB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAIpB,MAElBgB,EAAAC,EAAAC,cAAA,OAAKG,IAAKtB,EAAMuB,OAAQC,IAAI,YAG9BP,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAInB,MAClBe,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAIlB,MAClBc,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAIjB,MAAOJ,EAAMI,MAClCa,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAIhB,MAAOL,EAAMyB,YAGpCR,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAIf,MAClBW,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAId,YAAaP,EAAMO,aAG1CU,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAIb,MAClBS,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAIK,MAAO1B,EAAM0B,OAEpCT,EAAAC,EAAAC,cAAA,OAAKG,IAAKtB,EAAM2B,WCpBlBC,GHF+BnB,EGESoB,qBAAWC,KHFP,SAAAC,GAAA,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAAA,QAAAM,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAH,IAAAc,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MAyB9CQ,MAAQ,GAzBsCf,EA2C9CgB,cAAgB,SAAAC,GACd,IAAIC,EADmBC,EAEqCnB,EAAKoB,MAF1CC,EAAAF,EAEfG,YAFe,IAAAD,EAER,IAFQA,EAEHE,EAFGJ,EAEHI,SAAUC,EAFPL,EAEOK,cAAeC,EAFtBN,EAEsBM,WAE7C,OAAQC,IAAQT,IAEd,IAAK,UACL,IAAK,KACU,MAATK,EACFJ,EAAS,WACS,cAATI,IACTJ,EAAS,YAEX,MAEF,IAAK,OACU,MAATI,EACFJ,EAAS,WACS,cAATI,IACTJ,EAAS,YAEX,MAGF,IAAK,YACL,IAAK,OACU,MAATI,EACFJ,EAAS,WACS,cAATI,IACTJ,EAAS,YAEX,MAEF,IAAK,QACU,MAATI,EACFJ,EAAS,WACS,cAATI,IACTJ,EAAS,YAQf,GAAIA,EAAQ,CACV,IAAMS,EAAc3B,EAAKe,MAAMa,MAC3BC,EAAWF,EAEA,aAAXT,EACFW,GAAY,EAEZA,GAAY,GAGVJ,GAAcF,KAChBM,EAAW7B,EAAK8B,IAAID,EAAUJ,GAAcM,IAAMC,SAASC,MAAMV,UAI1CzC,IAArBkB,EAAKoB,MAAMQ,OACb5B,EAAKkC,SAAS,CACZN,MAAOC,IAIPL,GACFA,EAAcK,EAAUF,KA9GgB3B,EAmH9CmC,kBAAoB,SAACP,EAAOD,QAED7C,IAArBkB,EAAKoB,MAAMQ,OACb5B,EAAKkC,SAAS,CACZN,UAIA5B,EAAKoB,MAAMI,eACbxB,EAAKoB,MAAMI,cAAcI,EAAOD,IA5HU3B,EA4I9C8B,IAAM,SAACM,EAAGC,GACR,IAAMC,EAAIF,EAAIC,EACd,OAAOC,EAAI,EAAIA,EAAID,EAAIC,GA9IqBtC,EAAA,OAAAC,OAAAsC,EAAA,EAAAtC,CAAAH,EAAAD,GAAAI,OAAAuC,EAAA,EAAAvC,CAAAH,EAAA,EAAA2C,IAAA,qBAAAC,MAAA,WA4B5CvC,KAAK+B,SAAS,CACZN,MAAOzB,KAAKiB,MAAMQ,OAAS,MA7Be,CAAAa,IAAA,4BAAAC,MAAA,SAiCpBC,GAAW,IAC3Bf,EAAUe,EAAVf,MAEa,kBAAVA,GAAsBA,IAAUzB,KAAKiB,MAAMQ,OACpDzB,KAAK+B,SAAS,CACZN,YAtCwC,CAAAa,IAAA,SAAAC,MAAA,WAgIrC,IAAAE,EAC+CzC,KAAKiB,MAAfyB,GADrCD,EACChB,MADDgB,EACmBpB,cADnBvB,OAAA6C,EAAA,EAAA7C,CAAA2C,EAAA,4BAGChB,EAAUzB,KAAKY,MAAfa,MAER,OACE7C,EAAAC,EAAAC,cAAC8D,EAAA/D,EAAD,CAAegE,OAAO,SAASC,UAAW9C,KAAKa,eAC7CjC,EAAAC,EAAAC,cAACV,EAAD0B,OAAAiD,OAAA,CAAatB,MAAOA,EAAOJ,cAAerB,KAAKgC,mBAAuBU,SAvI9B/C,EAAA,CACrBiC,IAAMoB,eGGQpB,IAAMoB,yBCT3CC,EAAQ,CAMVC,oBAAqB,SAAUC,GAC3B,IAAIC,EAAa,GACXC,EAAQF,EAAMG,MAAM,KAFQC,GAAA,EAAAC,GAAA,EAAAC,OAAA9E,EAAA,IAGlC,QAAA+E,EAAAC,EAAiBN,EAAjBO,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAwB,KACdS,EADcN,EAAAnB,MACFe,MAAM,KACxBF,EAAWY,EAAK,IAAMA,EAAK,IALG,MAAAC,GAAAT,GAAA,EAAAC,EAAAQ,EAAA,YAAAV,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAOlC,OAAOL,GAmBXe,WAAY,SAAUnG,GAClB,IAAMoG,EAAO,IAAIC,KAAKrG,GAChBsG,IAAU,IAAID,MAAQE,UAAYH,EAAKG,WAAa,IACpDC,EAAWC,KAAKC,MAAMJ,EAAO,OAEnC,KAAIK,MAAMH,IAAaA,EAAW,GAAKA,GAAY,IAGnD,OAAmB,GAAZA,KACHF,EAAO,GAAM,MACbA,EAAO,KAAO,OACdA,EAAO,MAAQG,KAAKC,MAAMJ,EAAO,IAAM,KACvCA,EAAO,MAAQ,MACfA,EAAO,OAASG,KAAKC,MAAMJ,EAAO,MAAQ,MAC9B,GAAZE,GAAiB,QACjBA,EAAW,GAAKA,EAAW,KAC3BA,EAAW,IAAMC,KAAKG,KAAKJ,EAAW,GAAK,cH1BnDK,EAAiB,GAKjBC,EAAa,WAWjB,SAASC,EAAOC,EAAUC,GACtBjF,KAAKkF,UAAYF,EACjBhF,KAAKmF,SAAWF,EAkSpB,SAASG,EAAWC,EAAQC,EAAcC,EAAcC,GACpD,IAC+BC,EAAGC,EAASC,EADTC,EAAM,GACpCzF,EAASmF,EAAe,EAI5B,IAFAK,GAAmC,IAAlBJ,EAAuB,EAAI,EAEvCE,EAAI,EAAGA,EAAItF,EAAQsF,GAAK,EAEzBC,EAAUL,EAAOI,IAAM,KAAQ,GAAKE,EAAgBJ,GAAgBE,EAAI,IACxEG,GARU,mBAQKC,OAAQH,IAAY,EAAK,IAR9B,mBASEG,OAAiB,GAAVH,GAGvB,OAAQF,EAAU,YAAmBI,EAAIE,cAAgBF,EAiB7D,SAASG,EAAWV,EAAQC,EAAcC,EAAcC,GACpD,IAAyCC,EAAGO,EAAGC,EAASC,EAAMC,EAAMR,EAAhEC,EAAM,GAAIzF,EAASmF,EAAe,EAKtC,IAFAK,GAAmC,IAAlBJ,EAAuB,EAAI,EAEvCE,EAAI,EAAGA,EAAItF,EAAQsF,GAAK,EAMzB,IALAS,EAAST,EAAI,EAAKtF,EAAUkF,EAAQI,EAAI,IAAO,GAAK,EACpDU,EAASV,EAAI,EAAKtF,EAAUkF,EAAQI,EAAI,IAAO,GAAK,EACpDQ,GAAaZ,EAAOI,IAAM,KAAQ,GAAKE,EAAgBJ,GAAgBE,EAAI,IAAQ,MAAS,IACrFS,IAAU,GAAKP,EAAgBJ,IAAiBE,EAAI,GAAK,IAAQ,MAAS,EAC3EU,IAAU,GAAKR,EAAgBJ,IAAiBE,EAAI,GAAK,IAAQ,IAClEO,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAEhBJ,GADI,EAAJH,EAAY,EAAJO,GAASV,EAXhB,mEAYaO,OAAQI,IAAY,GAAK,EAAID,GAAM,IAE1CR,EAAU,OAI7B,OAAOI,EAeX,SAASQ,EAAaf,EAAQC,EAAcC,GACxC,IAAyCE,EAAGC,EAASC,EAAjDC,EAAM,GAAIzF,EAASmF,EAAe,EAItC,IAFAK,GAAmC,IAAlBJ,EAAuB,EAAI,EAEvCE,EAAI,EAAGA,EAAItF,EAAQsF,GAAK,EACzBC,EAAWL,EAAOI,IAAM,KAAQ,GAAKE,EAAgBJ,GAAgBE,EAAI,IAAQ,IACjFG,GAAOS,OAAOC,aAAaZ,GAG/B,OAAOE,EAeX,SAASW,EAAmBlB,EAAQC,EAAcC,GAC9C,IAA+BE,EAAqCE,EAAea,EAA/ErG,EAASmF,EAAe,EAAMmB,EAAS,IAAIC,YAAYvG,GAK3D,IAJAqG,EAAU,IAAIG,WAAWF,GAEzBd,GAAmC,IAAlBJ,EAAuB,EAAI,EAEvCE,EAAI,EAAGA,EAAItF,EAAQsF,GAAK,EACzBe,EAAQf,GAAMJ,EAAOI,IAAM,KAAQ,GAAKE,EAAgBJ,GAAgBE,EAAI,IAAQ,IAGxF,OAAOgB,EAaX,SAASG,EAAcC,GACnB,IACIC,EADAL,EAAS,CAACM,aAAe,EAAOC,OAAU,IAAKC,UAAa,GAUhE,GARAH,EAAgBD,GAAW,GAE3BJ,EAAM,YAAkBK,EAAa,cAAmB,GAEpD,IAASA,EAAcI,eAAe,YACtCT,EAAM,OAAaK,EAAa,SAG/B,IAASA,EAAcI,eAAe,aAA0C,KAAxB,EAAIrC,GAAwB,CACrF,GAAIiC,EAAa,SAAe,IAAM,EAClC,MAAM,IAAIK,MAAM,oCAEpBV,EAAM,SAAeK,EAAa,SAGtC,GAAI,mBAAsBL,EAAM,YAC5B,MAAM,IAAIU,MAAM,yCAGpB,GAAI,kBAAqBV,EAAM,OAC3B,MAAM,IAAIU,MAAM,oCAGpB,OAAOV,EAiBX,SAASW,EAAgBC,EAAQC,EAAS/B,GACtC,IAAIkB,EAGJ,OAAQa,GACJ,IAAK,OAEL,IAAK,UAEL,IAAK,UAED,MACJ,QACI,MAAM,IAAIH,MAAM,8CAIxB,OAAQE,GACJ,IAAK,MAWDZ,EAAS,SAAUb,EAAK2B,EAAaC,GACjC,OA5WhB,SAAoB5B,EAAK6B,EAAgBC,EAAmBnC,GACxD,IAAIF,EAA6BI,EAAGkC,EAAKC,EAAWC,EAChDC,EAAiBnC,EADTxF,EAASyF,EAAIzF,OAGzB,GAAI,IAAOA,EAAS,EAChB,MAAM,IAAIgH,MAAM,iDAQpB,IALA9B,EAASoC,GAAkB,CAAC,GAE5BK,GADAJ,EAAoBA,GAAqB,KACD,EACxC/B,GAAmC,IAAlBJ,EAAuB,EAAI,EAEvCE,EAAI,EAAGA,EAAItF,EAAQsF,GAAK,EAAG,CAE5B,GADAkC,EAAMI,SAASnC,EAAIoC,OAAOvC,EAAG,GAAI,IAC5Bd,MAAMgD,GAQP,MAAM,IAAIR,MAAM,kDALhB,IADAS,GADAC,GAAcpC,IAAM,GAAKqC,KACE,EACpBzC,EAAOlF,QAAUyH,GACpBvC,EAAO4C,KAAK,GAEhB5C,EAAOuC,IAAcD,GAAQ,GAAKhC,EAAgBJ,GAAgBsC,EAAa,IAMvF,MAAO,CAACtF,MAAS8C,EAAQ6C,OAAmB,EAAT/H,EAAauH,GAiV7BS,CAAWvC,EAAK2B,EAAaC,EAAgBjC,IAExD,MACJ,IAAK,OAWDkB,EAAS,SAAUb,EAAK2B,EAAaC,GACjC,OAldhB,SAAoB5B,EAAK0B,EAASG,EAAgBC,EAAmBnC,GACjE,IAAIF,EAAQ+C,EAASC,EAAyB5C,EAAGO,EAAG8B,EAChDF,EAAWC,EAAYlC,EAAe2C,EADTC,EAAU,EAO3C,GAJAlD,EAASoC,GAAkB,CAAC,GAE5BK,GADAJ,EAAoBA,GAAqB,KACD,EAEpC,SAAWJ,EAEX,IADA3B,GAAmC,IAAlBJ,EAAuB,EAAI,EACvCE,EAAI,EAAGA,EAAIG,EAAIzF,OAAQsF,GAAK,EA0B7B,IAxBA4C,EAAa,GAET,KAHJD,EAAUxC,EAAI4C,WAAW/C,IAIrB4C,EAAWJ,KAAKG,GACT,KAAQA,GACfC,EAAWJ,KAAK,IAAQG,IAAY,GACpCC,EAAWJ,KAAK,IAAkB,GAAVG,IAChB,MAASA,GAAa,OAAUA,EACxCC,EAAWJ,KACP,IAAQG,IAAY,GACpB,IAASA,IAAY,EAAK,GAC1B,IAAkB,GAAVA,IAGZ3C,GAAK,EACL2C,EAAU,QAAuB,KAAVA,IAAoB,GAA2B,KAApBxC,EAAI4C,WAAW/C,IACjE4C,EAAWJ,KACP,IAAQG,IAAY,GACpB,IAASA,IAAY,GAAM,GAC3B,IAASA,IAAY,EAAK,GAC1B,IAAkB,GAAVA,IAIXpC,EAAI,EAAGA,EAAIqC,EAAWlI,OAAQ6F,GAAK,EAAG,CAGvC,IADA4B,GADAC,EAAaU,EAAUT,KACI,EACpBzC,EAAOlF,QAAUyH,GACpBvC,EAAO4C,KAAK,GAGhB5C,EAAOuC,IAAcS,EAAWrC,IAAO,GAAKL,EAAgBJ,GAAgBsC,EAAa,IACzFU,GAAW,OAGhB,GAAK,YAAcjB,GAAY,YAAcA,EAMhD,IALA3B,GAAmC,IAAlBJ,EAAuB,EAAI,EAI5C+C,EAAmB,YAAchB,GAA8B,IAAjB/B,GAA0B,YAAc+B,GAA8B,IAAjB/B,EAC9FE,EAAI,EAAGA,EAAIG,EAAIzF,OAAQsF,GAAK,EAAG,CAShC,IARA2C,EAAUxC,EAAI4C,WAAW/C,IACF,IAAnB6C,IAEAF,GADApC,EAAc,IAAVoC,IACY,EAAMA,IAAY,GAItCR,GADAC,EAAaU,EAAUT,KACI,EACpBzC,EAAOlF,QAAUyH,GACpBvC,EAAO4C,KAAK,GAEhB5C,EAAOuC,IAAcQ,GAAY,GAAKzC,EAAgBJ,GAAgBsC,EAAa,IACnFU,GAAW,EAGnB,MAAO,CAAChG,MAAS8C,EAAQ6C,OAAoB,EAAVK,EAAcb,GA6Y9Be,CAAW7C,EAAK0B,EAASC,EAAaC,EAAgBjC,IAEjE,MACJ,IAAK,MAWDkB,EAAS,SAAUb,EAAK2B,EAAaC,GACjC,OAvThB,SAAoB5B,EAAK6B,EAAgBC,EAAmBnC,GACxD,IAAIF,EAA4BI,EAAGO,EAAG0C,EAAQC,EAASC,EAEnDd,EAAiBF,EAAWC,EAAYlC,EAFhC4C,EAAU,EAItB,IAAK,IAAM3C,EAAIiD,OAAO,sBAClB,MAAM,IAAI1B,MAAM,uCAKpB,GAFAyB,EAAahD,EAAIkD,QAAQ,KACzBlD,EAAMA,EAAImD,QAAQ,MAAO,KACnB,IAAMH,GAAgBA,EAAahD,EAAIzF,OACzC,MAAM,IAAIgH,MAAM,uCAQpB,IALA9B,EAASoC,GAAkB,CAAC,GAE5BK,GADAJ,EAAoBA,GAAqB,KACD,EACxC/B,GAAmC,IAAlBJ,EAAuB,EAAI,EAEvCE,EAAI,EAAGA,EAAIG,EAAIzF,OAAQsF,GAAK,EAAG,CAIhC,IAHAkD,EAAU/C,EAAIoC,OAAOvC,EAAG,GACxBiD,EAAS,EAEJ1C,EAAI,EAAGA,EAAI2C,EAAQxI,OAAQ6F,GAAK,EAEjC0C,GAxBK,mEAuBUI,QAAQH,EAAQ3C,KACX,GAAM,EAAIA,EAGlC,IAAKA,EAAI,EAAGA,EAAI2C,EAAQxI,OAAS,EAAG6F,GAAK,EAAG,CAGxC,IADA4B,GADAC,EAAaU,EAAUT,KACI,EACpBzC,EAAOlF,QAAUyH,GACpBvC,EAAO4C,KAAK,GAEhB5C,EAAOuC,KAAgBc,IAAY,GAAU,EAAJ1C,EAAW,MAC/C,GAAKL,EAAgBJ,GAAgBsC,EAAa,IACvDU,GAAW,GAInB,MAAO,CAAChG,MAAS8C,EAAQ6C,OAAoB,EAAVK,EAAcb,GA8Q9BsB,CAAWpD,EAAK2B,EAAaC,EAAgBjC,IAExD,MACJ,IAAK,QAWDkB,EAAS,SAAUb,EAAK2B,EAAaC,GACjC,OA5WhB,SAAsB5B,EAAK6B,EAAgBC,EAAmBnC,GAC1D,IAAIF,EAAQ+C,EAAS3C,EAAGqC,EAAiBF,EACrCC,EAAYlC,EAOhB,IALAN,EAASoC,GAAkB,CAAC,GAE5BK,GADAJ,EAAoBA,GAAqB,KACD,EACxC/B,GAAmC,IAAlBJ,EAAuB,EAAI,EAEvCE,EAAI,EAAGA,EAAIG,EAAIzF,OAAQsF,GAAK,EAC7B2C,EAAUxC,EAAI4C,WAAW/C,GAGzBmC,GADAC,EAAapC,EAAIqC,KACU,EACvBzC,EAAOlF,QAAUyH,GACjBvC,EAAO4C,KAAK,GAEhB5C,EAAOuC,IAAcQ,GAAY,GAAKzC,EAAgBJ,GAAgBsC,EAAa,IAGvF,MAAO,CAACtF,MAAS8C,EAAQ6C,OAAuB,EAAbtC,EAAIzF,OAAauH,GAwVjCuB,CAAarD,EAAK2B,EAAaC,EAAgBjC,IAE1D,MACJ,IAAK,cACD,IACIkB,EAAS,IAAIC,YAAY,GAC3B,MAAOwC,GACL,MAAM,IAAI/B,MAAM,iDAapBV,EAAS,SAAU0C,EAAK5B,EAAaC,GACjC,OA/RhB,SAA4B2B,EAAK1B,EAAgBC,EAAmBnC,GAChE,IAAIF,EAAQI,EAAGqC,EAAiBF,EAAWC,EAAYlC,EAAea,EAQtE,IANAnB,EAASoC,GAAkB,CAAC,GAE5BK,GADAJ,EAAoBA,GAAqB,KACD,EACxC/B,GAAmC,IAAlBJ,EAAuB,EAAI,EAC5CiB,EAAU,IAAIG,WAAWwC,GAEpB1D,EAAI,EAAGA,EAAI0D,EAAIC,WAAY3D,GAAK,EAEjCmC,GADAC,EAAapC,EAAIqC,KACU,EACvBzC,EAAOlF,QAAUyH,GACjBvC,EAAO4C,KAAK,GAEhB5C,EAAOuC,IAAcpB,EAAQf,IAAO,GAAKE,EAAgBJ,GAAgBsC,EAAa,IAG1F,MAAO,CAACtF,MAAS8C,EAAQ6C,OAA2B,EAAjBiB,EAAIC,WAAiB1B,GA6QrC2B,CAAmBF,EAAK5B,EAAaC,EAAgBjC,IAEhE,MACJ,QACI,MAAM,IAAI4B,MAAM,wDAGxB,OAAOV,EAWX,SAAS6C,EAAQC,EAAGtH,GAChB,OAAQsH,GAAKtH,EAAMsH,IAAO,GAAKtH,EAWnC,SAASuH,EAAQD,EAAGtH,GAChB,OAAIA,EAAI,IACJA,GAAQ,GACD,IAAI8C,EACPwE,EAAEpE,UAAYlD,EAAIsH,EAAErE,YAAe,GAAKjD,EACxCsH,EAAErE,WAAajD,EAAIsH,EAAEpE,WAAc,GAAKlD,IAErC,IAAMA,EACN,IAAI8C,EACPwE,EAAErE,WAAajD,EAAIsH,EAAEpE,WAAc,GAAKlD,EACxCsH,EAAEpE,UAAYlD,EAAIsH,EAAErE,YAAe,GAAKjD,GAGrCsH,EAYf,SAASE,EAAQF,EAAGtH,GAChB,OAAQsH,IAAMtH,EAAMsH,GAAM,GAAKtH,EAWnC,SAASyH,EAAQH,EAAGtH,GAChB,IAAmB0H,EAAM,IAAI5E,EAAOwE,EAAErE,UAAWqE,EAAEpE,UAcnD,OAZI,IAAMlD,EACG,IAAI8C,EACR4E,EAAIzE,YAAcjD,EAAO0H,EAAIxE,UAAa,GAAKlD,EAAM,WACrD0H,EAAIxE,WAAalD,EAAO0H,EAAIzE,WAAc,GAAKjD,EAAM,YAGjD,IAAI8C,EACR4E,EAAIxE,WAAclD,EAAI,GAAS0H,EAAIzE,WAAc,GAAKjD,EAAM,WAC5D0H,EAAIzE,YAAejD,EAAI,GAAS0H,EAAIxE,UAAa,GAAKlD,EAAM,YAezE,SAAS2H,EAAOL,EAAGtH,GACf,OAAOsH,IAAMtH,EAWjB,SAAS4H,EAAON,EAAGtH,GAef,OAZI,IAAMA,EACG,IAAI8C,EACTwE,EAAErE,YAAcjD,EAChBsH,EAAEpE,WAAalD,EAAMsH,EAAErE,WAAc,GAAKjD,EAAM,YAG3C,IAAI8C,EACT,EACAwE,EAAErE,YAAejD,EAAI,IAgBjC,SAAS6H,EAAUP,EAAGQ,EAAGC,GACrB,OAAOT,EAAIQ,EAAIC,EAYnB,SAASC,EAAMV,EAAGQ,EAAGC,GACjB,OAAQT,EAAIQ,GAAOR,EAAIS,EAY3B,SAASE,EAAMX,EAAGQ,EAAGC,GACjB,OAAO,IAAIjF,EACNwE,EAAErE,UAAY6E,EAAE7E,WAAeqE,EAAErE,UAAY8E,EAAE9E,UAC/CqE,EAAEpE,SAAW4E,EAAE5E,UAAcoE,EAAEpE,SAAW6E,EAAE7E,UAarD,SAASgF,EAAOZ,EAAGQ,EAAGC,GAClB,OAAQT,EAAIQ,EAAMR,EAAIS,EAAMD,EAAIC,EAYpC,SAASI,EAAOb,EAAGQ,EAAGC,GAClB,OAAO,IAAIjF,EACNwE,EAAErE,UAAY6E,EAAE7E,UAChBqE,EAAErE,UAAY8E,EAAE9E,UAChB6E,EAAE7E,UAAY8E,EAAE9E,UAChBqE,EAAEpE,SAAW4E,EAAE5E,SACfoE,EAAEpE,SAAW6E,EAAE7E,SACf4E,EAAE5E,SAAW6E,EAAE7E,UAWxB,SAASkF,EAAUd,GACf,OAAOE,EAAQF,EAAG,GAAKE,EAAQF,EAAG,IAAME,EAAQF,EAAG,IAUvD,SAASe,GAAUf,GACf,IAAIgB,EAASb,EAAQH,EAAG,IAAKiB,EAASd,EAAQH,EAAG,IAC7CkB,EAASf,EAAQH,EAAG,IAExB,OAAO,IAAIxE,EACPwF,EAAOrF,UAAYsF,EAAOtF,UAAYuF,EAAOvF,UAC7CqF,EAAOpF,SAAWqF,EAAOrF,SAAWsF,EAAOtF,UAUnD,SAASuF,GAAUnB,GACf,OAAOE,EAAQF,EAAG,GAAKE,EAAQF,EAAG,IAAME,EAAQF,EAAG,IAUvD,SAASoB,GAAUpB,GACf,IAAIqB,EAASlB,EAAQH,EAAG,IAAKsB,EAASnB,EAAQH,EAAG,IAC7CuB,EAASpB,EAAQH,EAAG,IAExB,OAAO,IAAIxE,EACP6F,EAAO1F,UAAY2F,EAAO3F,UAAY4F,EAAO5F,UAC7C0F,EAAOzF,SAAW0F,EAAO1F,SAAW2F,EAAO3F,UAUnD,SAAS4F,GAAUxB,GACf,OAAOE,EAAQF,EAAG,GAAKE,EAAQF,EAAG,IAAMK,EAAOL,EAAG,GAUtD,SAASyB,GAAUzB,GACf,IAAI0B,EAAQvB,EAAQH,EAAG,GAAI2B,EAAQxB,EAAQH,EAAG,GAAI4B,EAAOtB,EAAON,EAAG,GAEnE,OAAO,IAAIxE,EACPkG,EAAM/F,UAAYgG,EAAMhG,UAAYiG,EAAKjG,UACzC+F,EAAM9F,SAAW+F,EAAM/F,SAAWgG,EAAKhG,UAW/C,SAASiG,GAAU7B,GACf,OAAOE,EAAQF,EAAG,IAAME,EAAQF,EAAG,IAAMK,EAAOL,EAAG,IAUvD,SAAS8B,GAAU9B,GACf,IAAI+B,EAAS5B,EAAQH,EAAG,IAAKgC,EAAS7B,EAAQH,EAAG,IAC7CiC,EAAO3B,EAAON,EAAG,GAErB,OAAO,IAAIxE,EACPuG,EAAOpG,UAAYqG,EAAOrG,UAAYsG,EAAKtG,UAC3CoG,EAAOnG,SAAWoG,EAAOpG,SAAWqG,EAAKrG,UAajD,SAASsG,GAAa5M,EAAG6M,GACrB,IAAIC,GAAW,MAAJ9M,IAAmB,MAAJ6M,GAG1B,OAAe,OAFJ7M,IAAM,KAAO6M,IAAM,KAAOC,IAAQ,MAEnB,GAAa,MAANA,EAcrC,SAASC,GAAa/M,EAAG6M,EAAGG,EAAGC,GAC3B,IAAIH,GAAW,MAAJ9M,IAAmB,MAAJ6M,IAAmB,MAAJG,IAAmB,MAAJC,GAIxD,OAAe,OAHJjN,IAAM,KAAO6M,IAAM,KAAOG,IAAM,KAAOC,IAAM,KAC/CH,IAAQ,MAES,GAAa,MAANA,EAerC,SAASI,GAAalN,EAAG6M,EAAGG,EAAGC,EAAGE,GAC9B,IAAIL,GAAW,MAAJ9M,IAAmB,MAAJ6M,IAAmB,MAAJG,IAAmB,MAAJC,IAC/C,MAAJE,GAIL,OAAe,OAHJnN,IAAM,KAAO6M,IAAM,KAAOG,IAAM,KAAOC,IAAM,KAC/CE,IAAM,KAAOL,IAAQ,MAEJ,GAAa,MAANA,EAYrC,SAASM,GAAa1C,EAAGQ,GACrB,IAAI4B,EAAKO,EAAK/G,EAUd,OARAwG,GAAoB,MAAbpC,EAAEpE,WAAmC,MAAb4E,EAAE5E,UAEjCA,GAAmB,OADnB+G,GAAO3C,EAAEpE,WAAa,KAAO4E,EAAE5E,WAAa,KAAOwG,IAAQ,OAC7B,GAAa,MAANA,EAErCA,GAAqB,MAAdpC,EAAErE,YAAqC,MAAd6E,EAAE7E,YAAuBgH,IAAQ,IAI1D,IAAInH,GAFS,OADpBmH,GAAO3C,EAAErE,YAAc,KAAO6E,EAAE7E,YAAc,KAAOyG,IAAQ,OAC9B,GAAa,MAANA,EAETxG,GAcjC,SAASgH,GAAatN,EAAG6M,EAAGG,EAAGC,GAC3B,IAAIH,EAAKO,EAAK/G,EAcd,OAZAwG,GAAoB,MAAb9M,EAAEsG,WAAmC,MAAbuG,EAAEvG,WACf,MAAb0G,EAAE1G,WAAmC,MAAb2G,EAAE3G,UAG/BA,GAAmB,OAFnB+G,GAAOrN,EAAEsG,WAAa,KAAOuG,EAAEvG,WAAa,KACvC0G,EAAE1G,WAAa,KAAO2G,EAAE3G,WAAa,KAAOwG,IAAQ,OAC3B,GAAa,MAANA,EAErCA,GAAqB,MAAd9M,EAAEqG,YAAqC,MAAdwG,EAAExG,YACf,MAAd2G,EAAE3G,YAAqC,MAAd4G,EAAE5G,YAAuBgH,IAAQ,IAKxD,IAAInH,GAFS,OAFpBmH,GAAOrN,EAAEqG,YAAc,KAAOwG,EAAExG,YAAc,KACzC2G,EAAE3G,YAAc,KAAO4G,EAAE5G,YAAc,KAAOyG,IAAQ,OAC5B,GAAa,MAANA,EAETxG,GAejC,SAASiH,GAAavN,EAAG6M,EAAGG,EAAGC,EAAGE,GAC9B,IAAIL,EAAKO,EAAK/G,EAkBd,OAhBAwG,GAAoB,MAAb9M,EAAEsG,WAAmC,MAAbuG,EAAEvG,WACf,MAAb0G,EAAE1G,WAAmC,MAAb2G,EAAE3G,WACb,MAAb6G,EAAE7G,UAIPA,GAAmB,OAHnB+G,GAAOrN,EAAEsG,WAAa,KAAOuG,EAAEvG,WAAa,KACvC0G,EAAE1G,WAAa,KAAO2G,EAAE3G,WAAa,KAAO6G,EAAE7G,WAAa,KAC3DwG,IAAQ,OACiB,GAAa,MAANA,EAErCA,GAAqB,MAAd9M,EAAEqG,YAAqC,MAAdwG,EAAExG,YACf,MAAd2G,EAAE3G,YAAqC,MAAd4G,EAAE5G,YACb,MAAd8G,EAAE9G,YAAuBgH,IAAQ,IAM/B,IAAInH,GAFS,OAHpBmH,GAAOrN,EAAEqG,YAAc,KAAOwG,EAAExG,YAAc,KACzC2G,EAAE3G,YAAc,KAAO4G,EAAE5G,YAAc,KACvC8G,EAAE9G,YAAc,KAAOyG,IAAQ,OACL,GAAa,MAANA,EAETxG,GAWjC,SAASkH,GAASxN,EAAG6M,GACjB,OAAO,IAAI3G,EACPlG,EAAEqG,UAAYwG,EAAExG,UAChBrG,EAAEsG,SAAWuG,EAAEvG,UA4CvB,SAASmH,GAAYC,GACjB,IAAiBC,EAASC,EAAQhH,EAA9BgB,EAAS,GAEb,GAAK,UAAY8F,GAAsC,KAAxB,EAAI1H,GAC/B4B,EAAS,CACL,WAAY,WAAY,WAAY,UAAY,iBAEjD,GAAwC,IAAnC8F,EAAQG,YAAY,OAAQ,IAAuC,KAAxB,EAAI7H,GAUvD,OATA2H,EAAU,CACN,WAAY,UAAY,UAAY,WACpC,WAAY,WAAY,WAAY,YAExCC,EAAS,CACL,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,UAAY,YAGhCF,GACJ,IAAK,UACD9F,EAAS+F,EACT,MACJ,IAAK,UACD/F,EAASgG,EACT,MACJ,IAAK,UACDhG,EAAS,CACL,IAAI1B,EAAO,WAAYyH,EAAQ,IAC/B,IAAIzH,EAAO,WAAayH,EAAQ,IAChC,IAAIzH,EAAO,WAAYyH,EAAQ,IAC/B,IAAIzH,EAAO,UAAayH,EAAQ,IAChC,IAAIzH,EAAO,WAAYyH,EAAQ,IAC/B,IAAIzH,EAAO,YAAayH,EAAQ,IAChC,IAAIzH,EAAO,WAAYyH,EAAQ,IAC/B,IAAIzH,EAAO,WAAayH,EAAQ,KAEpC,MACJ,IAAK,UACD/F,EAAS,CACL,IAAI1B,EAAO0H,EAAO,GAAI,YACtB,IAAI1H,EAAO0H,EAAO,GAAI,YACtB,IAAI1H,EAAO0H,EAAO,GAAI,YACtB,IAAI1H,EAAO0H,EAAO,GAAI,YACtB,IAAI1H,EAAO0H,EAAO,GAAI,YACtB,IAAI1H,EAAO0H,EAAO,GAAI,WACtB,IAAI1H,EAAO0H,EAAO,GAAI,YACtB,IAAI1H,EAAO0H,EAAO,GAAI,YAE1B,MACJ,QACI,MAAM,IAAItF,MAAM,2BAErB,IAA0C,IAApCoF,EAAQG,YAAY,QAAS,IAAkD,IAApCH,EAAQG,YAAY,QAAS,IACvD,KAAxB,EAAI7H,GAKN,MAAM,IAAIsC,MAAM,6BAJhB,IAAK1B,EAAI,EAAGA,EAAI,EAAGA,GAAK,EACpBgB,EAAOhB,GAAK,CAAC,IAAIV,EAAO,EAAG,GAAI,IAAIA,EAAO,EAAG,GAAI,IAAIA,EAAO,EAAG,GAAI,IAAIA,EAAO,EAAG,GAAI,IAAIA,EAAO,EAAG,IAM3G,OAAO0B,EAaX,SAASkG,GAAUC,EAAOC,GACtB,IAAYhO,EAAG6M,EAAGG,EAAGC,EAAGE,EAAGc,EACiCC,EADxDC,EAAI,GAAsBC,EAAKhD,EAAOiD,EAASpD,EAC/CqD,EAAMhD,EAAQiD,EAAO9D,EAAS+D,EAAY5B,GAC1C6B,EAAYvB,GAQhB,IANAlN,EAAIgO,EAAE,GACNnB,EAAImB,EAAE,GACNhB,EAAIgB,EAAE,GACNf,EAAIe,EAAE,GACNb,EAAIa,EAAE,GAEDE,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAEjBC,EAAED,GADFA,EAAI,GACGH,EAAMG,GAENK,EAAKJ,EAAED,EAAI,GAAKC,EAAED,EAAI,GAAKC,EAAED,EAAI,IAAMC,EAAED,EAAI,IAAK,GAIzDD,EADAC,EAAI,GACAO,EAAUF,EAAKvO,EAAG,GAAIoO,EAAGvB,EAAGG,EAAGC,GAAIE,EAAG,WAAYgB,EAAED,IACjDA,EAAI,GACPO,EAAUF,EAAKvO,EAAG,GAAIqO,EAAOxB,EAAGG,EAAGC,GAAIE,EAAG,WAAYgB,EAAED,IACrDA,EAAI,GACPO,EAAUF,EAAKvO,EAAG,GAAIsO,EAAIzB,EAAGG,EAAGC,GAAIE,EAAG,WAAYgB,EAAED,IAErDO,EAAUF,EAAKvO,EAAG,GAAIqO,EAAOxB,EAAGG,EAAGC,GAAIE,EAAG,WAAYgB,EAAED,IAGhEf,EAAIF,EACJA,EAAID,EACJA,EAAIuB,EAAK1B,EAAG,IACZA,EAAI7M,EACJA,EAAIiO,EASR,OANAD,EAAE,GAAKQ,EAAUxO,EAAGgO,EAAE,IACtBA,EAAE,GAAKQ,EAAU3B,EAAGmB,EAAE,IACtBA,EAAE,GAAKQ,EAAUxB,EAAGgB,EAAE,IACtBA,EAAE,GAAKQ,EAAUvB,EAAGe,EAAE,IACtBA,EAAE,GAAKQ,EAAUrB,EAAGa,EAAE,IAEfA,EAkBX,SAASU,GAAaC,EAAWC,EAAiBC,EAAiBb,EAAGc,GAClE,IAAIlI,EAAGmI,EAAuBC,EAAQC,EAOtC,IADAD,EAAiD,IAArCJ,EAAkB,KAAQ,GAAM,GACrCD,EAAUrN,QAAU0N,GACvBL,EAAUvF,KAAK,GAkBnB,IAfAuF,EAAUC,IAAoB,IAAM,KAAS,GAAMA,EAAkB,GAMrEK,EAAWL,EAAkBC,EAC7BF,EAAUK,GAAqB,WAAXC,EAGpBN,EAAUK,EAAS,GAAMC,EAAWhJ,EAAc,EAElD8I,EAAwBJ,EAAUrN,OAG7BsF,EAAI,EAAGA,EAAImI,EAAuBnI,GAAK,GACxCoH,EAAIF,GAAUa,EAAUO,MAAMtI,EAAGA,EAAI,IAAKoH,GAG9C,OAAOA,EA0GX,SAASmB,GAAUpB,EAAOC,EAAGN,GACzB,IAAI1N,EAAG6M,EAAGG,EAAGC,EAAGE,EAAGiC,EAAGC,EAAGC,EAAGC,EAAIC,EAAIC,EAAWvB,EAAGwB,EAC9ClB,EAAWmB,EAAWlB,EAAWmB,EAAQC,EAAQC,EAAQC,EACzD3B,EAAIE,EAAK0B,EAAa3I,EAAMC,EAAM0H,EAAQiB,EAA5B9B,EAAI,GAItB,GAAiB,YAAZT,GAAqC,YAAZA,GACA,KAAxB,EAAI1H,GAeH,IAAiB,YAAZ0H,GAAqC,YAAZA,GACP,KAAxB,EAAI1H,GAgBN,MAAM,IAAIsC,MAAM,4CAdhBmH,EAAY,GACZC,EAAmB,EACnBM,EAAM9J,EACNsI,EAAYpB,GACZuC,EAAYrC,GACZmB,EAAYlB,GACZqC,EAASzD,GACT0D,EAASrD,GACTsD,EAASrE,GACTsE,EAASjE,GACTwC,EAAM/C,EACN6C,EAAK/C,EACL4E,EAAIxQ,OA5BJgQ,EAAY,GACZC,EAAmB,EACnBM,EAAME,OACN1B,EAAY5B,GACZ+C,EAAY5C,GACZ0B,EAAYvB,GACZ0C,EAAS1D,GACT2D,EAAStD,GACTuD,EAAStE,EACTuE,EAASlE,GACTyC,EAAMhD,EACN8C,EAAKhD,EACL6E,EAAIzQ,EA8BR,IATAQ,EAAIgO,EAAE,GACNnB,EAAImB,EAAE,GACNhB,EAAIgB,EAAE,GACNf,EAAIe,EAAE,GACNb,EAAIa,EAAE,GACNoB,EAAIpB,EAAE,GACNqB,EAAIrB,EAAE,GACNsB,EAAItB,EAAE,GAEDE,EAAI,EAAGA,EAAIuB,EAAWvB,GAAK,EACxBA,EAAI,IACJc,EAASd,EAAIwB,EACbrI,EAAQ0G,EAAMzM,QAAU0N,EAAU,EAAIjB,EAAMiB,GAC5C1H,EAAQyG,EAAMzM,QAAU0N,EAAS,EAAK,EAAIjB,EAAMiB,EAAS,GAEzDb,EAAED,GAAK,IAAI8B,EAAI3I,EAAMC,IAErB6G,EAAED,GAAKyB,EACHE,EAAO1B,EAAED,EAAI,IAAKC,EAAED,EAAI,GACxB0B,EAAOzB,EAAED,EAAI,KAAMC,EAAED,EAAI,KAIjCqB,EAAKd,EAAUa,EAAGS,EAAO5C,GAAIiB,EAAGjB,EAAGiC,EAAGC,GAAIY,EAAE/B,GAAIC,EAAED,IAClDsB,EAAKhB,EAAUsB,EAAO9P,GAAIsO,EAAItO,EAAG6M,EAAGG,IACpCsC,EAAID,EACJA,EAAID,EACJA,EAAIjC,EACJA,EAAIqB,EAAUvB,EAAGsC,GACjBtC,EAAID,EACJA,EAAIH,EACJA,EAAI7M,EACJA,EAAIwO,EAAUe,EAAIC,GAYtB,OATAxB,EAAE,GAAKQ,EAAUxO,EAAGgO,EAAE,IACtBA,EAAE,GAAKQ,EAAU3B,EAAGmB,EAAE,IACtBA,EAAE,GAAKQ,EAAUxB,EAAGgB,EAAE,IACtBA,EAAE,GAAKQ,EAAUvB,EAAGe,EAAE,IACtBA,EAAE,GAAKQ,EAAUrB,EAAGa,EAAE,IACtBA,EAAE,GAAKQ,EAAUY,EAAGpB,EAAE,IACtBA,EAAE,GAAKQ,EAAUa,EAAGrB,EAAE,IACtBA,EAAE,GAAKQ,EAAUc,EAAGtB,EAAE,IAEfA,EA8GX,SAASmC,GAAUpC,EAAOhM,GACtB,IAAIqO,EAAO1F,EAAGQ,EAAGmF,EAhfHrQ,EAAG6M,EAAGG,EAAGC,EAAGE,EAgfNmD,EAAI,GAAIC,EAAI,GAEhC,GAAI,OAASxC,EACT,IAAKrD,EAAI,EAAGA,EAAIqD,EAAMzM,OAAQoJ,GAAK,EAC/B3I,GAAO2I,IAAM,GAAK,IAAKA,IAAM,GAAK,EAAK,GAAK8C,GACxCzL,GAAO2I,IAAM,GAAK,IAAKA,IAAM,GAAK,EAAK,GACvC,IAAIxE,EAAO6H,EAAMrD,EAAI,GAAIqD,EAAMrD,KAK3C,IAAK0F,EAAQ,EAAGA,EAAQ,GAAIA,GAAS,EAAG,CAOpC,IAHAC,EAAI5C,GAAY,SAGX/C,EAAI,EAAGA,EAAI,EAAGA,GAAK,EACpB4F,EAAE5F,IAngBI1K,EAmgBU+B,EAAM2I,GAAG,GAngBhBmC,EAmgBoB9K,EAAM2I,GAAG,GAngB1BsC,EAmgB8BjL,EAAM2I,GAAG,GAngBpCuC,EAogBXlL,EAAM2I,GAAG,GApgBKyC,EAogBDpL,EAAM2I,GAAG,GAngB3B,IAAIxE,EACPlG,EAAEqG,UAAYwG,EAAExG,UAAY2G,EAAE3G,UAAY4G,EAAE5G,UAAY8G,EAAE9G,UAC1DrG,EAAEsG,SAAWuG,EAAEvG,SAAW0G,EAAE1G,SAAW2G,EAAE3G,SAAW6G,EAAE7G,WAmgBtD,IAAKoE,EAAI,EAAGA,EAAI,EAAGA,GAAK,EACpB6F,EAAE7F,GAAK8C,GAAS8C,GAAG5F,EAAI,GAAK,GAAIC,EAAQ2F,GAAG5F,EAAI,GAAK,GAAI,IAE5D,IAAKA,EAAI,EAAGA,EAAI,EAAGA,GAAK,EACpB,IAAKQ,EAAI,EAAGA,EAAI,EAAGA,GAAK,EACpBnJ,EAAM2I,GAAGQ,GAAKsC,GAASzL,EAAM2I,GAAGQ,GAAIqF,EAAE7F,IAK9C,IAAKA,EAAI,EAAGA,EAAI,EAAGA,GAAK,EACpB,IAAKQ,EAAI,EAAGA,EAAI,EAAGA,GAAK,EACpBmF,EAAEnF,IAAI,EAAIR,EAAI,EAAIQ,GAAK,GAAKP,EACxB5I,EAAM2I,GAAGQ,GACTxL,EAAOgL,GAAGQ,IAMtB,IAAKR,EAAI,EAAGA,EAAI,EAAGA,GAAK,EACpB,IAAKQ,EAAI,EAAGA,EAAI,EAAGA,GAAK,EACpBnJ,EAAM2I,GAAGQ,GAAKsC,GACV6C,EAAE3F,GAAGQ,GACL,IAAIhF,GACEmK,GAAG3F,EAAI,GAAK,GAAGQ,GAAG7E,UAAagK,GAAG3F,EAAI,GAAK,GAAGQ,GAAG7E,WACjDgK,GAAG3F,EAAI,GAAK,GAAGQ,GAAG5E,SAAY+J,GAAG3F,EAAI,GAAK,GAAGQ,GAAG5E,WAOlEvE,EAAM,GAAG,GAAKyL,GAASzL,EAAM,GAAG,GAAIpC,EAAQyQ,IAGhD,OAAOrO,EArWkB,KAAxB,EAAIiE,KACLxG,EAAS,CACL,WAAY,WAAY,WAAY,WACpC,UAAY,WAAY,WAAY,WACpC,WAAY,UAAY,UAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,UAAY,UACpC,UAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,UAAY,UACpC,UAAY,UAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,UACpC,UAAY,UAAY,UAAY,UACpC,UAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,YAGX,KAAxB,EAAIwG,KACLvG,EAAW,CACP,IAAIyG,EAAO1G,EAAO,GAAI,YAAa,IAAI0G,EAAO1G,EAAO,GAAI,WACzD,IAAI0G,EAAO1G,EAAO,GAAI,YAAa,IAAI0G,EAAO1G,EAAO,GAAI,YACzD,IAAI0G,EAAO1G,EAAO,GAAI,YAAa,IAAI0G,EAAO1G,EAAO,GAAI,YACzD,IAAI0G,EAAO1G,EAAO,GAAI,YAAa,IAAI0G,EAAO1G,EAAO,GAAI,YACzD,IAAI0G,EAAO1G,EAAO,GAAI,YAAa,IAAI0G,EAAO1G,EAAO,GAAI,YACzD,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,YAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,WAC3D,IAAI0G,EAAO1G,EAAO,IAAK,WAAa,IAAI0G,EAAO1G,EAAO,IAAK,YAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,WAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,YAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,YAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,YAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,WAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,YAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,YAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,WAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,YAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,YAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,YAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,WAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,YAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,WAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,YAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,WAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,YAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,YAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,YAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,YAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,YAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,WAC3D,IAAI0G,EAAO1G,EAAO,IAAK,WAAa,IAAI0G,EAAO1G,EAAO,IAAK,YAC3D,IAAI0G,EAAO1G,EAAO,IAAK,YAAa,IAAI0G,EAAO1G,EAAO,IAAK,YAC3D,IAAI0G,EAAO,WAAY,YAAa,IAAIA,EAAO,WAAY,WAC3D,IAAIA,EAAO,WAAY,YAAa,IAAIA,EAAO,WAAY,YAC3D,IAAIA,EAAO,UAAY,YAAa,IAAIA,EAAO,UAAY,YAC3D,IAAIA,EAAO,UAAY,YAAa,IAAIA,EAAO,UAAY,WAC3D,IAAIA,EAAO,UAAY,WAAa,IAAIA,EAAO,UAAY,YAC3D,IAAIA,EAAO,WAAY,WAAa,IAAIA,EAAO,WAAY,YAC3D,IAAIA,EAAO,WAAY,YAAa,IAAIA,EAAO,WAAY,YAC3D,IAAIA,EAAO,WAAY,WAAa,IAAIA,EAAO,WAAY,eAI1C,KAAxB,EAAIF,KACLrG,EAAU,CACN,IAAIuG,EAAO,EAAY,GAAa,IAAIA,EAAO,EAAY,OAC3D,IAAIA,EAAO,WAAY,OAAa,IAAIA,EAAO,WAAY,YAC3D,IAAIA,EAAO,EAAY,OAAa,IAAIA,EAAO,EAAY,YAC3D,IAAIA,EAAO,WAAY,YAAa,IAAIA,EAAO,WAAY,OAC3D,IAAIA,EAAO,EAAY,KAAa,IAAIA,EAAO,EAAY,KAC3D,IAAIA,EAAO,EAAY,YAAa,IAAIA,EAAO,EAAY,YAC3D,IAAIA,EAAO,EAAY,YAAa,IAAIA,EAAO,WAAY,KAC3D,IAAIA,EAAO,WAAY,OAAa,IAAIA,EAAO,WAAY,OAC3D,IAAIA,EAAO,WAAY,OAAa,IAAIA,EAAO,WAAY,KAC3D,IAAIA,EAAO,EAAY,OAAa,IAAIA,EAAO,WAAY,YAC3D,IAAIA,EAAO,WAAY,YAAa,IAAIA,EAAO,WAAY,OAC3D,IAAIA,EAAO,EAAY,YAAa,IAAIA,EAAO,WAAY,aAG/DxG,EAAS,CACL,CAAC,EAAG,GAAI,EAAG,GAAI,IACf,CAAC,EAAG,GAAI,GAAI,GAAI,GAChB,CAAC,GAAI,EAAG,GAAI,GAAI,IAChB,CAAC,GAAI,GAAI,GAAI,GAAI,IACjB,CAAC,GAAI,GAAI,GAAI,EAAG,MA4VxB,IAAM8Q,GAAQ,SAAU9C,EAAS+C,EAAazI,GAC1C,IAAwDS,EACpDiI,EAAmBC,EAAqCC,EACxDC,EAAkBC,EAAWC,EAAcC,EACavB,EACjCwB,EAJvBC,EAAe,EAAGvC,EAAY,GAAIwC,EAAe,EACfC,EAAa1D,EAE/C2D,GAAa,EAAOC,EAAc,GAAIC,EAAc,GACpDC,GAAgB,EAAqBC,GAAU,EAAO/K,GAAgB,EAM1E,GAHA+B,GADAwI,EAAejJ,GAAW,IACJ,UAAgB,QACtCyH,EAAYwB,EAAY,WAAiB,KAEtB/H,SAASuG,EAAW,KAAS,EAAIA,EAChD,MAAM,IAAInH,MAAM,iCAGpB,GAAK,UAAY8I,GAAyC,KAAxB,EAAIpL,GAClC6K,EAAmB,IACnBC,EAAYhD,GACZiD,EAAerC,GACfkC,EAAe,IACfI,EAAiB,SAAUjP,GACvB,OAAOA,EAAMmN,cAEd,GAA2C,IAAtCkC,EAAWvD,YAAY,OAAQ,IAAuC,KAAxB,EAAI7H,GAW1D,GAVA8K,EAAY,SAAU/C,EAAOC,GACzB,OAAOmB,GAAUpB,EAAOC,EAAGoD,IAE/BL,EAAe,SAAUpC,EAAWC,EAAiBC,EAAiBb,EAAGc,GACrE,OA/PZ,SAAsBH,EAAWC,EAAiBC,EAAiBb,EAAGN,EAASoB,GAC3E,IAAIlI,EAAGmI,EAAuBC,EAAQpH,EAAQ8J,EAAiBzC,EAE/D,GAAiB,YAAZvB,GAAqC,YAAZA,GACA,KAAxB,EAAI1H,GAQH,IAAiB,YAAZ0H,GAAqC,YAAZA,GACP,KAAxB,EAAI1H,GASN,MAAM,IAAIsC,MAAM,4CAHhB0G,EAAmD,IAAvCJ,EAAkB,MAAS,IAAO,GAC9C8C,EAAkB,QAVlB1C,EAAiD,IAArCJ,EAAkB,KAAQ,GAAM,GAC5C8C,EAAkB,GActB,KAAO/C,EAAUrN,QAAU0N,GACvBL,EAAUvF,KAAK,GAgBnB,IAbAuF,EAAUC,IAAoB,IAAM,KAAS,GAAKA,EAAkB,GAIpEK,EAAWL,EAAkBC,EAC7BF,EAAUK,GAAqB,WAAXC,EAGpBN,EAAUK,EAAS,GAAMC,EAAWhJ,EAAc,EAElD8I,EAAwBJ,EAAUrN,OAG7BsF,EAAI,EAAGA,EAAImI,EAAuBnI,GAAK8K,EACxC1D,EAAImB,GAAUR,EAAUO,MAAMtI,EAAGA,EAAI8K,GAAkB1D,EAAGN,GAG9D,GAAK,YAAcA,GAAsC,KAAxB,EAAI1H,GACjC4B,EAAS,CACLoG,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GACpBA,EAAE,GAAIA,EAAE,GAAIA,EAAE,SAEf,GAAK,YAAcN,GAAsC,KAAxB,EAAI1H,GACxC4B,EAASoG,OACN,GAAK,YAAcN,GAAsC,KAAxB,EAAI1H,GACxC4B,EAAS,CACLoG,EAAE,GAAG3H,UAAW2H,EAAE,GAAG1H,SACrB0H,EAAE,GAAG3H,UAAW2H,EAAE,GAAG1H,SACrB0H,EAAE,GAAG3H,UAAW2H,EAAE,GAAG1H,SACrB0H,EAAE,GAAG3H,UAAW2H,EAAE,GAAG1H,SACrB0H,EAAE,GAAG3H,UAAW2H,EAAE,GAAG1H,SACrB0H,EAAE,GAAG3H,UAAW2H,EAAE,GAAG1H,cAEtB,IAAK,YAAcoH,GAAsC,KAAxB,EAAI1H,GAaxC,MAAM,IAAIsC,MAAM,4CAZhBV,EAAS,CACLoG,EAAE,GAAG3H,UAAW2H,EAAE,GAAG1H,SACrB0H,EAAE,GAAG3H,UAAW2H,EAAE,GAAG1H,SACrB0H,EAAE,GAAG3H,UAAW2H,EAAE,GAAG1H,SACrB0H,EAAE,GAAG3H,UAAW2H,EAAE,GAAG1H,SACrB0H,EAAE,GAAG3H,UAAW2H,EAAE,GAAG1H,SACrB0H,EAAE,GAAG3H,UAAW2H,EAAE,GAAG1H,SACrB0H,EAAE,GAAG3H,UAAW2H,EAAE,GAAG1H,SACrB0H,EAAE,GAAG3H,UAAW2H,EAAE,GAAG1H,UAO7B,OAAOsB,EAiLQ+J,CAAahD,EAAWC,EAAiBC,EAAiBb,EAAGoD,IAExEJ,EAAiB,SAAUjP,GACvB,OAAOA,EAAMmN,SAGZ,YAAckC,GAAyC,KAAxB,EAAIpL,GACpC6K,EAAmB,IACnBD,EAAe,SACZ,GAAK,YAAcQ,GAAyC,KAAxB,EAAIpL,GAC3C6K,EAAmB,IACnBD,EAAe,SACZ,GAAK,YAAcQ,GAAyC,KAAxB,EAAIpL,GAC3C6K,EAAmB,KACnBD,EAAe,QACZ,IAAK,YAAcQ,GAAyC,KAAxB,EAAIpL,GAI3C,MAAM,IAAIsC,MAAM,uCAHhBuI,EAAmB,KACnBD,EAAe,QAIhB,IAA6C,IAAvCQ,EAAWvD,YAAY,QAAS,IAAqD,IAAvCuD,EAAWvD,YAAY,QAAS,IAC7D,KAAxB,EAAI7H,GAuCN,MAAM,IAAIsC,MAAM,uCAtChB,IAAIsJ,EAAY,EAQhB,GANAd,EAAYX,GACZa,EAAiB,SAAUjP,GACvB,OAhqBZ,SAAwBA,GACpB,IAAgB6E,EAAZiL,EAAQ,GACZ,IAAKjL,EAAI,EAAGA,EAAI,EAAGA,GAAK,EACpBiL,EAAMjL,GAAK7E,EAAM6E,GAAGsI,QAGxB,OAAO2C,EA0pBQC,CAAe/P,IAE1B2E,EAAe,EAEX,aAAe0K,EACfP,EAAmB,KACnBD,EAAe,SAEZ,GAAI,aAAeQ,EACtBP,EAAmB,KACnBD,EAAe,SACZ,GAAI,aAAeQ,EACtBP,EAAmB,IACnBD,EAAe,SACZ,GAAI,aAAeQ,EACtBP,EAAmB,IACnBD,EAAe,SACZ,GAAI,aAAeQ,EACtBP,EAAmB,KACnBD,GAAgB,EAChBgB,EAAY,GACZH,GAAU,MACP,IAAI,aAAeL,EAMtB,MAAM,IAAI9I,MAAM,uCALhBuI,EAAmB,KACnBD,GAAgB,EAChBgB,EAAY,GACZH,GAAU,EAIdV,EAAe,SAAUpC,EAAWC,EAAiBC,EAAiB9M,EAAO+M,GACzE,OAhJZ,SAAsBH,EAAWC,EAAiBC,EAAiB9M,EAAOgQ,EAAWH,EAAW9C,GAC5F,IAAIlI,EACyCoL,EADtCpK,EAAS,GAAI8J,EAAkBK,IAAc,EAAGE,EAAe,EAClEC,EAAkBtD,IAAoB,EAM1C,IAAKhI,EAAI,EAAGA,EAAIsL,GAAmBtD,GAAmBmD,EAAWnL,GAAK8K,EAClE3P,EAAQoO,GAAUxB,EAAUO,MAAMtI,EAAGA,EAAI8K,GAAkB3P,GAC3D6M,GAAmBmD,EAOvB,IAJApD,EAAYA,EAAUO,MAAMtI,GAC5BgI,GAAoCmD,EAG7BpD,EAAUrN,OAASoQ,GACtB/C,EAAUvF,KAAK,GAUnB,IALAuF,GADA/H,EAAIgI,IAAoB,IACT,IAAMgD,GAAmBhL,EAAI,EAAT,EAEnC+H,EAAU+C,EAAkB,IAAM,WAClC3P,EAAQoO,GAAUxB,EAAW5M,GAEN,GAAhB6F,EAAOtG,OAAcwN,IACxBkD,EAAOjQ,EAAMkQ,EAAe,GAAIA,EAAe,EAAK,GACpDrK,EAAOwB,KAAK4I,EAAK1L,YACG,GAAhBsB,EAAOtG,QAAewN,KAG1BlH,EAAOwB,KAAK4I,EAAK3L,WAGb,IAAuB,IAF3B4L,GAAgB,GAEiBF,GAC7B5B,GAAU,KAAMpO,GAIxB,OAAO6F,EAsGQuK,CAAaxD,EAAWC,EAAiBC,EAAiB9M,EAAO8O,EAAkBe,EAAW9C,IAK7G6B,EAAgBpI,EAAgBkI,EAAahI,EAAS/B,GACtDgK,EAAoBjD,GAAY2D,GAahCjQ,KAAKiR,WAAa,SAAU3O,EAAKgN,EAAazI,GAC1C,IAAsBqK,EAAYC,EAAWC,EAAUC,EACnD5L,EAAG6L,EAEP,IAAI,IAASpB,EACT,MAAM,IAAI/I,MAAM,wBAGpB,IAAI,IAASkJ,EACT,MAAM,IAAIlJ,MAAM,4CAGpB,IAAiB,IAAZmJ,GAA+C,KAAxB,EAAIzL,GAC5B,MAAM,IAAIsC,MAAM,mCAmBpB,GAVAgK,GADAD,EAFmB9J,EAAgBkI,EAFnChI,GADaT,GAAW,IACJ,UAAgB,OAEqBtB,EAE5CgM,CAAiBjP,IACR,OACtB8O,EAAWF,EAAU,MAKrBI,GAHAD,EAAgB3B,IAAqB,GAGH,EAAK,EAInC2B,EAAiBF,EAAY,EAAI,CAMjC,IAJAC,EAAWxB,EAAawB,EAAUD,EAAW,EAAG7E,GAAY2D,GAAaR,GAIlE2B,EAASjR,QAAUmR,GACtBF,EAASnJ,KAAK,GAElBmJ,EAASE,IAAmB,gBACzB,GAAID,EAAiBF,EAAY,EAAI,CAIxC,KAAOC,EAASjR,QAAUmR,GACtBF,EAASnJ,KAAK,GAElBmJ,EAASE,IAAmB,WAIhC,IAAK7L,EAAI,EAAGA,GAAK6L,EAAgB7L,GAAK,EAClC0K,EAAY1K,GAAmB,UAAd2L,EAAS3L,GAC1B2K,EAAY3K,GAAmB,WAAd2L,EAAS3L,GAG9B8J,EAAoBI,EAAUQ,EAAaZ,GAC3CQ,EAAeL,EAEfQ,GAAa,GAUjBlQ,KAAKwR,OAAS,SAAUC,GACpB,IAAIP,EAAYQ,EAAaC,EAAaC,EAAOnM,EAAGoM,EAAqB,EACrEC,EAAqBpC,IAAqB,EAO9C,IAJAgC,GADAR,EAAa1B,EAAciC,EAAWjE,EAAWwC,IACzB,OACxB4B,EAAQV,EAAU,MAElBS,EAAcD,IAAgB,EACzBjM,EAAI,EAAGA,EAAIkM,EAAalM,GAAKqM,EAC1BD,EAAqBnC,GAAoBgC,IACzCnC,EAAoBI,EAChBiC,EAAM7D,MAAMtI,EAAGA,EAAIqM,GACnBvC,GAEJsC,GAAsBnC,GAG9BK,GAAgB8B,EAChBrE,EAAYoE,EAAM7D,MAAM8D,IAAuB,GAC/C7B,EAAe0B,EAAchC,EAC7BW,GAAgB,GAgBpBrQ,KAAK+R,QAAU,SAAU1K,EAAQR,GAC7B,IAAImL,EAAYvM,EAAGqB,EAAemL,EAElC,IAAI,IAAS/B,EACT,MAAM,IAAI/I,MAAM,8CAKpB,GAFAL,EAAgBF,EAAcC,IAEb,IAAZyJ,GAA+C,KAAxB,EAAIzL,GAAwB,CACpD,IAAmC,IAA/BiC,EAAa,SACb,MAAM,IAAIK,MAAM,yCAEpBsI,EAAe3I,EAAa,SAIhC,OAAQO,GACJ,IAAK,MACD2K,EAAa,SAAUE,GACnB,OAAO9M,EAAW8M,EAAUzC,EAAclK,EAAcuB,IAE5D,MACJ,IAAK,MACDkL,EAAa,SAAUE,GACnB,OAAOnM,EAAWmM,EAAUzC,EAAclK,EAAcuB,IAE5D,MACJ,IAAK,QACDkL,EAAa,SAAUE,GACnB,OAAO9L,EAAa8L,EAAUzC,EAAclK,IAEhD,MACJ,IAAK,cACD,IACIE,EAAI,IAAIiB,YAAY,GACtB,MAAOwC,GACL,MAAM,IAAI/B,MAAM,iDAEpB6K,EAAa,SAAUE,GACnB,OAAO3L,EAAmB2L,EAAUzC,EAAclK,IAEtD,MACJ,QACI,MAAM,IAAI4B,MAAM,kDAIxB,IADA8K,EAAiBrC,EAAapC,EAAUO,QAASiC,EAAcD,EAAcF,EAAeN,GAAoBE,GAC3GhK,EAAI,EAAGA,EAAI6I,EAAW7I,GAAK,EAOE,KAAxB,EAAIZ,KAAuC,IAAZyL,GAAsBb,EAAe,KAAO,IAC7EwC,EAAeA,EAAe9R,OAAS,IAAM,WAAe,GAAMsP,EAAe,IAErFwC,EAAiBrC,EAAaqC,EAAgBxC,EAAc,EAAGnD,GAAY2D,GAAaR,GAG5F,OAAOuC,EAAWC,IAgBtBjS,KAAKmS,QAAU,SAAU9K,EAAQR,GAC7B,IAAImL,EAAYI,EAAWtL,EAAemL,EAE1C,IAAI,IAAU/B,EACV,MAAM,IAAI/I,MAAM,sDAMpB,OAHAL,EAAgBF,EAAcC,GAGtBQ,GACJ,IAAK,MACD2K,EAAa,SAAUE,GACnB,OAAO9M,EAAW8M,EAAUzC,EAAclK,EAAcuB,IAE5D,MACJ,IAAK,MACDkL,EAAa,SAAUE,GACnB,OAAOnM,EAAWmM,EAAUzC,EAAclK,EAAcuB,IAE5D,MACJ,IAAK,QACDkL,EAAa,SAAUE,GACnB,OAAO9L,EAAa8L,EAAUzC,EAAclK,IAEhD,MACJ,IAAK,cACD,IACIyM,EAAa,IAAItL,YAAY,GAC/B,MAAOwC,GACL,MAAM,IAAI/B,MAAM,iDAEpB6K,EAAa,SAAUE,GACnB,OAAO3L,EAAmB2L,EAAUzC,EAAclK,IAEtD,MACJ,QACI,MAAM,IAAI4B,MAAM,wDAOxB,OAJAiL,EAAYxC,EAAapC,EAAUO,QAASiC,EAAcD,EAAcF,EAAeN,GAAoBE,GAC3GwC,EAAiBtC,EAAUS,EAAa9D,GAAY2D,IAG7C+B,EAFPC,EAAiBrC,EAAawC,EAAW3C,EAAcC,EAAkBuC,EAAgBxC,MIp+D3F4C,GAAc,4BACdC,GAAiB,qDCCjBC,GAAS,CACbC,KAAM,WAIJ,IAJqB,IAIDC,EAHhB7M,EADiB1F,UAAAC,OAAA,QAAAxB,IAAAuB,UAAA,GAAAA,UAAA,GAAR,GAETwS,EAAS,GAEJ9F,EAAQ,EAAanH,EAAI,EAAGkN,EAN3B,oEAOV/M,EAAIC,OAAW,EAAJJ,KAAWkN,EAAM,IAAKlN,EAAI,GACrCiN,GAAUC,EAAI9M,OAAO,GAAK+G,GAAS,EAAInH,EAAI,EAAI,GAAI,CAIjD,IAFAgN,EAAW7M,EAAI4C,WAAW/C,GAAK,MAEhB,IACb,MAAM,IAAI0B,MAAM,4FAGlByF,EAAQA,GAAS,EAAI6F,EAGvB,OAAOC,ICoIX,SAASE,GAAgBC,GACrB,OAAOC,GAAcD,GAAmB,IAO5C,SAASE,GAAeC,EAAaC,GAEjC,OAAOH,GAUX,SAAmBI,EAAQC,GACvB,IAAIC,EAAS,IAAI/D,GAAM,QAAS,QAGhC,OAFA+D,EAAOnC,WAAWkC,EAAQ,QAC1BC,EAAO5B,OAAO0B,GACPE,EAAOjB,QAAQ,OAfJkB,CAAUL,EAAaC,IAK7C,SAASH,GAAclN,GACnB,OAAO0N,mBAAmB1N,GAAKmD,QAAQ,WAAY,SAACwK,GAChD,MAAO,IAAMA,EAAU/K,WAAW,GAAGgL,SAAS,MAWtD,SAASC,GAAuBC,GAE5B,IAAIC,EAAe7T,OAAO8T,KAAKF,GAC3BG,EAAMF,EAAaxT,OACvBwT,EAAaG,OAGb,IADA,IAAIC,EAAWJ,EAAa,GAAK,IAAMD,EAASC,EAAa,IACpDlO,EAAI,EAAGA,EAAIoO,EAAKpO,IACrBsO,GAAY,IAAMJ,EAAalO,GAAK,IAAMqN,GAAckB,mBAAmBN,EAASC,EAAalO,MAErG,OAAOsO,EAGX,IAAME,GAAe,CACjBC,gCAtLJ,SAAyCC,EAAYC,EAASC,GAG1D,IAAIC,EAAY7P,KAAKwK,MAAM5K,KAAKkQ,MAAQ,KAEpCC,EAAQjC,GAAOC,KAAKH,GAAc,IAAMiC,GACxCG,EAAWnB,mBAAkB,8EAAA3S,OAA+E2S,mBAAmBe,KAI/HK,EAAY3B,GAapB,SAAwC4B,EAAQC,EAAKtS,EAAKgS,EAAWE,EAAOC,GACxE,OAAOE,EACD,IAAM7B,GAAc8B,GACpB,IAAM9B,GAIhB,SAA0CxQ,EAAKgS,EAAWE,EAAOC,GAS7D,OAAOhB,GARQ,CACXoB,eAAgBJ,EAChBK,mBAAoBxS,EACpByS,YAAaP,EACbQ,uBAAwB,YACxBC,gBAAiBX,EACjBY,cAAe,QAXOC,CAAiC7S,EAAKgS,EAAWE,EAAOC,IAlBjEW,CAA+BjB,EAAYC,EAAS/B,GAAaiC,EAAWE,EAAOC,GACnF7B,GAAgBN,KAIjC,MAAO,6BACsBD,GAAc,mBACrBmC,EAAQ,uBACJE,EAAY,2DAEZJ,EAAY,sBACbG,EAAW,0BAmKHY,+BAxIrC,SAAwClB,EAAYC,EAASkB,EAAcC,GAEvE,IAAIjB,EAAY7P,KAAKwK,MAAM5K,KAAKkQ,MAAQ,KAEpCC,EAAQjC,GAAOC,KAAKH,GAAc,IAAMiC,GAIxCI,EAAY3B,GAcpB,SAAuC4B,EAAQC,EAAKtS,EAAKgS,EAAWE,EAAOc,EAAcC,GACrF,OAAOZ,EACD,IAAM7B,GAAc8B,GACpB,IAAM9B,GAGhB,SAAyCxQ,EAAKgS,EAAWE,EAAOgB,EAAOD,GAWnE,OAAO9B,GAVQ,CACXqB,mBAAoBxS,EACpByS,YAAaP,EACbQ,uBAAwB,YACxBC,gBAAiBX,EACjBmB,YAAaD,EACbE,eAAgBH,EAChBL,cAAe,QAXOS,CAAgCrT,EAAKgS,EAAWE,EAAOc,EAAcC,IAnB9EK,CAA8BzB,EAAYC,EAAS/B,GAAaiC,EAAUE,MAAOc,EAAcC,GAC/F3C,GAAgBN,KAIjC,MAAO,6BACsBD,GAAc,mBACrBmC,EAAQ,uBACJE,EAAY,2DAEZJ,EAAY,mBAChBgB,EAAe,sBACZC,EAAW,0BAsH6BM,qCAzFrE,SAA8C1B,EAAYC,EAAS0B,EAAaC,EAAmBC,GAE/F,IAkD2DC,EAlDvD3B,EAAY7P,KAAKwK,MAAM5K,KAAKkQ,MAAQ,KAEpCC,EAAQjC,GAAOC,KAAKH,GAAc,IAAMiC,GAKxCI,EAAY3B,GAapB,SAA6C4B,EAAQC,EAAKtS,EAAKgS,EAAWE,EAAOsB,EAAaE,GAC1F,OAAOrB,EACD,IAAM7B,GAAc8B,GACpB,IAAM9B,GAGhB,SAA+CxQ,EAAKgS,EAAWE,EAAOsB,EAAaE,GAC/E,IAAItC,EAAW,CACXoB,mBAAoBxS,EACpByS,YAAaP,EACbQ,uBAAwB,YACxBC,gBAAiBX,EACjBmB,YAAaK,EACbZ,cAAe,OAMnB,OAHIc,IACAtC,EAAQ5T,OAAAoW,EAAA,EAAApW,CAAA,GAAO4T,EAAasC,IAEzBvC,GAAuBC,GAhBJyC,CAAsC7T,EAAKgS,EAAWE,EAAOsB,EAAaE,IAlBnFI,CAAoCjC,EAAYC,EAAS/B,GAAaiC,EAAWE,EAAOsB,EAAaE,IA6C3DC,EA5CWF,EA6C/DjD,GA7C+CR,IA6Cd,IAAMQ,GAAcmD,KAzC5D,MAAO,6BACsB5D,GAAc,mBACrBmC,EAAQ,uBACJE,EAAY,2DAEZJ,EAAY,mBAChBwB,EAAc,2BCvHlCO,GAAkB,8CAClBC,GAAiB,6CACjBC,GAAkB,0DAClBC,GAAe,oDACfC,GAAa,wDA8FnB,IAAMC,GAAa,CACfC,gBA7FJ,SAAyBC,EAAgBnC,GAErCoC,MAAM,uCAAuCR,GAAiB,CAC1D1B,OAAQ,OACRmC,QAAS,CACLC,cAAe9C,GACVC,gCAAgC,OAC7BmC,GAAiBO,MAE9BI,KAAK,SAAAC,GAAG,OAAIA,EAAI5X,SACd2X,KAAK,SAAA3X,GAAI,OA6DlB,SAA4C6X,EAAWzC,GACnD,GAAIyC,EAAW,CACX,IAAMC,EAASlU,EAAMC,oBAAoBgU,GACnC1B,EAAQ2B,EAAM,YAChB1C,GACAA,EAASe,IAlEC4B,CAAmC/X,EAAMoV,KACtD4C,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,UAAYF,EAAMG,qBAkFjCC,eA/ErB,SAAwBlC,EAAOD,EAAUd,GACrCoC,MAAMP,GAAgB,CAClB3B,OAAQ,OACRmC,QAAS,CACLC,cAAe9C,GACVoB,+BAA+B,OAC5BiB,GAAgBd,EAAOD,MAEpCyB,KAAK,SAAAC,GAAG,OAAIA,EAAI5X,SACd2X,KAAK,SAAA3X,GAAI,OA0DlB,SAA2C6X,EAAWzC,GAClD,GAAIyC,EAAW,CACX,IAAMC,EAASlU,EAAMC,oBAAoBgU,GACnC1B,EAAQ2B,EAAM,YACdhE,EAASgE,EAAM,mBACjB1C,GACAA,EAASe,EAAOrC,IAhENwE,CAAkCtY,EAAMoV,KACrD4C,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,UAAYF,EAAMG,qBAqEjBG,gBAlErC,SAAyB9B,EAAaC,EAAmBtB,GACrDoC,MAAMN,GAAiB,CACnB5B,OAAQ,MACRmC,QAAS,CACLC,cAAe9C,GACV4B,qCAAqC,MAAOU,GACzCT,EAAaC,EAAmB,OAE7CiB,KAAK,SAAAC,GAAG,OAAIA,EAAI5X,SACd2X,KAAK,SAAA3X,GAAI,OAAIoV,EAASpV,KACtBgY,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,UAAYF,EAAMG,qBAwDAI,UArDtD,SAAmBC,EAAehC,EAAaC,EAAmBtB,GAE9DoC,MADYL,GAAe,OAASsB,EACzB,CACPnD,OAAQ,OACRmC,QAAS,CACLC,cAAe9C,GACV4B,qCAAqC,OAAQW,GAC1CV,EAAaC,EAAmB,CAACgC,GAAID,OAElDd,KAAK,SAAAC,GAAG,OAAIA,EAAI5X,SACd2X,KAAK,SAAA3X,GAAI,OAAIoV,EAASpV,KACtBgY,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,UAAYF,EAAMG,qBA0CWO,QAvCjE,SAAiBC,EAAkBnC,EAAaC,EAAmBtB,GAC/D,IAAMG,EAAM6B,GAAW1N,QAAQ,MAAOkP,GACtCV,QAAQC,IAAI5C,GACZiC,MAAMjC,EAAK,CACPD,OAAQ,OACRmC,QAAS,CACLC,cAAe9C,GACV4B,qCAAqC,OAAQjB,EAC1CkB,EAAaC,GACrBmC,eAAgB,sBAErBlB,KAAK,SAAAC,GAAG,OAAIA,EAAI5X,SACd2X,KAAK,SAAA3X,GAAI,OAAIoV,EAASpV,KACtBgY,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,UAAYF,EAAMG,sBC1EhDU,GAAc,iDCECC,8MAYjBC,eAAiB,WDPjB3B,GAAWC,gBAAgBwB,GAAa,SAAU3C,GAC9C,GAAIA,EAAO,CACP+B,QAAQC,IAAI,uBAAyBhC,GACrC,IAAMZ,EAAG,0DAAAjU,OAA6D6U,GAEtE8C,OAAOC,SAASC,KAAO5D,8ECR3B,OACIhW,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAIyZ,WAChB7Z,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAI0Z,UAChB9Z,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAI2Z,OAArB,0CACA/Z,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAI4Z,YAAaC,QAAS7Y,KAAKqY,gBAAlD,kBANmBzW,IAAMoB,WCoB9B8V,oLARX,OACEla,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACia,GAAD,cAZU/V,mBCElBgW,IAASC,OAAOra,EAAAC,EAAAC,cAACoa,GAAD,MAASC,SAASC,eAAe,2BCPjD3b,EAAAC,QAAA,CAAkB+a,UAAA,6BAAAC,SAAA,4BAAAC,MAAA,yBAAAC,YAAA","file":"static/js/main.65eb3890.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tweet\":\"Tweet_tweet__30xDk\",\"col1\":\"Tweet_col1__21tLS\",\"col2\":\"Tweet_col2__3r7WZ\",\"row1\":\"Tweet_row1__2j_UM\",\"name\":\"Tweet_name__39JD9\",\"time\":\"Tweet_time__2RA0s\",\"row2\":\"Tweet_row2__3zW6U\",\"screenName\":\"Tweet_screenName__c6MGC\",\"row3\":\"Tweet_row3__3IU4L\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport keycode from 'keycode';\nimport EventListener from 'react-event-listener';\n\nexport default function bindKeyboard(MyComponent) {\n  class BindKeyboard extends React.Component {\n    static propTypes = {\n      /**\n       * @ignore\n       */\n      axis: PropTypes.oneOf(['x', 'x-reverse', 'y', 'y-reverse']),\n      /**\n       * @ignore\n       */\n      children: PropTypes.node,\n      /**\n       * @ignore\n       */\n      index: PropTypes.number,\n      /**\n       * @ignore\n       */\n      onChangeIndex: PropTypes.func,\n      /**\n       * @ignore\n       */\n      slideCount: PropTypes.number,\n    };\n\n    state = {};\n\n    componentWillMount() {\n      this.setState({\n        index: this.props.index || 0,\n      });\n    }\n\n    componentWillReceiveProps(nextProps) {\n      const { index } = nextProps;\n\n      if (typeof index === 'number' && index !== this.props.index) {\n        this.setState({\n          index,\n        });\n      }\n    }\n\n    handleKeyDown = event => {\n      let action;\n      const { axis = 'x', children, onChangeIndex, slideCount } = this.props;\n\n      switch (keycode(event)) {\n        // Customize for KaiOS\n        case 'page up':\n        case 'up':\n          if (axis === 'y') {\n            action = 'decrease';\n          } else if (axis === 'y-reverse') {\n            action = 'increase';\n          }\n          break;\n\n        case 'left':\n          if (axis === 'x') {\n            action = 'decrease';\n          } else if (axis === 'x-reverse') {\n            action = 'increase';\n          }\n          break;\n\n        // Customize for KaiOS\n        case 'page down':\n        case 'down':\n          if (axis === 'y') {\n            action = 'increase';\n          } else if (axis === 'y-reverse') {\n            action = 'decrease';\n          }\n          break;\n\n        case 'right':\n          if (axis === 'x') {\n            action = 'increase';\n          } else if (axis === 'x-reverse') {\n            action = 'decrease';\n          }\n          break;\n\n        default:\n          break;\n      }\n\n      if (action) {\n        const indexLatest = this.state.index;\n        let indexNew = indexLatest;\n\n        if (action === 'increase') {\n          indexNew += 1;\n        } else {\n          indexNew -= 1;\n        }\n\n        if (slideCount || children) {\n          indexNew = this.mod(indexNew, slideCount || React.Children.count(children));\n        }\n\n        // Is uncontrolled\n        if (this.props.index === undefined) {\n          this.setState({\n            index: indexNew,\n          });\n        }\n\n        if (onChangeIndex) {\n          onChangeIndex(indexNew, indexLatest);\n        }\n      }\n    };\n\n    handleChangeIndex = (index, indexLatest) => {\n      // Is uncontrolled\n      if (this.props.index === undefined) {\n        this.setState({\n          index,\n        });\n      }\n\n      if (this.props.onChangeIndex) {\n        this.props.onChangeIndex(index, indexLatest);\n      }\n    };\n\n    render() {\n      const { index: indexProp, onChangeIndex, ...other } = this.props;\n\n      const { index } = this.state;\n\n      return (\n        <EventListener target=\"window\" onKeyDown={this.handleKeyDown}>\n          <MyComponent index={index} onChangeIndex={this.handleChangeIndex} {...other} />\n        </EventListener>\n      );\n    }\n\n    mod = (n, m) => {\n      const q = n % m;\n      return q < 0 ? q + m : q;\n    }\n    \n  }\n\n  return BindKeyboard;\n}","/**\n * @preserve A JavaScript implementation of the SHA family of hashes, as\n * defined in FIPS PUB 180-4 and FIPS PUB 202, as well as the corresponding\n * HMAC implementation as defined in FIPS PUB 198a\n *\n * Copyright 2008-2018 Brian Turek, 1998-2009 Paul Johnston & Contributors\n * Distributed under the BSD License\n * See http://caligatio.github.com/jsSHA/ for more information\n */\n\n/*jslint\n\tbitwise: true, multivar: true, for: true, this: true, sub: true, esversion: 3\n*/\n\n/**\n * SUPPORTED_ALGS is the stub for a compile flag that will cause pruning of\n * functions that are not needed when a limited number of SHA families are\n * selected\n *\n * @define {number} ORed value of SHA variants to be supported\n *   1 = SHA-1, 2 = SHA-224/SHA-256, 4 = SHA-384/SHA-512, 8 = SHA3\n */\nvar SUPPORTED_ALGS = 8 | 4 | 2 | 1;\n\n//\"use strict\";\n\n/* Globals */\nvar TWO_PWR_32 = 4294967296;\n\n/**\n * Int_64 is a object for 2 32-bit numbers emulating a 64-bit number\n *\n * @private\n * @constructor\n * @this {Int_64}\n * @param {number} msint_32 The most significant 32-bits of a 64-bit number\n * @param {number} lsint_32 The least significant 32-bits of a 64-bit number\n */\nfunction Int_64(msint_32, lsint_32) {\n    this.highOrder = msint_32;\n    this.lowOrder = lsint_32;\n}\n\n/**\n * Convert a string to an array of big-endian words\n *\n * There is a known bug with an odd number of existing bytes and using a\n * UTF-16 encoding.  However, this function is used such that the existing\n * bytes are always a result of a previous UTF-16 str2packed call and\n * therefore there should never be an odd number of existing bytes\n *\n * @private\n * @param {string} str String to be converted to binary representation\n * @param {string} utfType The Unicode type, UTF8 or UTF16BE, UTF16LE, to\n *   use to encode the source string\n * @param {Array<number>} existingPacked A packed int array of bytes to\n *   append the results to\n * @param {number} existingPackedLen The number of bits in the existingPacked\n *   array\n * @param {number} bigEndianMod Modifier for whether hash function is\n *   big or small endian\n * @return {{value : Array<number>, binLen : number}} Hash list where\n *   \"value\" contains the output number array and \"binLen\" is the binary\n *   length of \"value\"\n */\nfunction str2packed(str, utfType, existingPacked, existingPackedLen, bigEndianMod) {\n    var packed, codePnt, codePntArr, byteCnt = 0, i, j, existingByteLen,\n        intOffset, byteOffset, shiftModifier, transposeBytes;\n\n    packed = existingPacked || [0];\n    existingPackedLen = existingPackedLen || 0;\n    existingByteLen = existingPackedLen >>> 3;\n\n    if (\"UTF8\" === utfType) {\n        shiftModifier = (bigEndianMod === -1) ? 3 : 0;\n        for (i = 0; i < str.length; i += 1) {\n            codePnt = str.charCodeAt(i);\n            codePntArr = [];\n\n            if (0x80 > codePnt) {\n                codePntArr.push(codePnt);\n            } else if (0x800 > codePnt) {\n                codePntArr.push(0xC0 | (codePnt >>> 6));\n                codePntArr.push(0x80 | (codePnt & 0x3F));\n            } else if ((0xd800 > codePnt) || (0xe000 <= codePnt)) {\n                codePntArr.push(\n                    0xe0 | (codePnt >>> 12),\n                    0x80 | ((codePnt >>> 6) & 0x3f),\n                    0x80 | (codePnt & 0x3f)\n                );\n            } else {\n                i += 1;\n                codePnt = 0x10000 + (((codePnt & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));\n                codePntArr.push(\n                    0xf0 | (codePnt >>> 18),\n                    0x80 | ((codePnt >>> 12) & 0x3f),\n                    0x80 | ((codePnt >>> 6) & 0x3f),\n                    0x80 | (codePnt & 0x3f)\n                );\n            }\n\n            for (j = 0; j < codePntArr.length; j += 1) {\n                byteOffset = byteCnt + existingByteLen;\n                intOffset = byteOffset >>> 2;\n                while (packed.length <= intOffset) {\n                    packed.push(0);\n                }\n                /* Known bug kicks in here */\n                packed[intOffset] |= codePntArr[j] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));\n                byteCnt += 1;\n            }\n        }\n    } else if ((\"UTF16BE\" === utfType) || \"UTF16LE\" === utfType) {\n        shiftModifier = (bigEndianMod === -1) ? 2 : 0;\n        /* Internally strings are UTF-16BE so transpose bytes under two conditions:\n            * need LE and not switching endianness due to SHA-3\n            * need BE and switching endianness due to SHA-3 */\n        transposeBytes = ((\"UTF16LE\" === utfType) && (bigEndianMod !== 1)) || ((\"UTF16LE\" !== utfType) && (bigEndianMod === 1));\n        for (i = 0; i < str.length; i += 1) {\n            codePnt = str.charCodeAt(i);\n            if (transposeBytes === true) {\n                j = codePnt & 0xFF;\n                codePnt = (j << 8) | (codePnt >>> 8);\n            }\n\n            byteOffset = byteCnt + existingByteLen;\n            intOffset = byteOffset >>> 2;\n            while (packed.length <= intOffset) {\n                packed.push(0);\n            }\n            packed[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));\n            byteCnt += 2;\n        }\n    }\n    return {\"value\": packed, \"binLen\": byteCnt * 8 + existingPackedLen};\n}\n\n/**\n * Convert a hex string to an array of big-endian words\n *\n * @private\n * @param {string} str String to be converted to binary representation\n * @param {Array<number>} existingPacked A packed int array of bytes to\n *   append the results to\n * @param {number} existingPackedLen The number of bits in the existingPacked\n *   array\n * @param {number} bigEndianMod Modifier for whether hash function is\n *   big or small endian\n * @return {{value : Array<number>, binLen : number}} Hash list where\n *   \"value\" contains the output number array and \"binLen\" is the binary\n *   length of \"value\"\n */\nfunction hex2packed(str, existingPacked, existingPackedLen, bigEndianMod) {\n    var packed, length = str.length, i, num, intOffset, byteOffset,\n        existingByteLen, shiftModifier;\n\n    if (0 !== (length % 2)) {\n        throw new Error(\"String of HEX type must be in byte increments\");\n    }\n\n    packed = existingPacked || [0];\n    existingPackedLen = existingPackedLen || 0;\n    existingByteLen = existingPackedLen >>> 3;\n    shiftModifier = (bigEndianMod === -1) ? 3 : 0;\n\n    for (i = 0; i < length; i += 2) {\n        num = parseInt(str.substr(i, 2), 16);\n        if (!isNaN(num)) {\n            byteOffset = (i >>> 1) + existingByteLen;\n            intOffset = byteOffset >>> 2;\n            while (packed.length <= intOffset) {\n                packed.push(0);\n            }\n            packed[intOffset] |= num << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));\n        } else {\n            throw new Error(\"String of HEX type contains invalid characters\");\n        }\n    }\n\n    return {\"value\": packed, \"binLen\": length * 4 + existingPackedLen};\n}\n\n/**\n * Convert a string of raw bytes to an array of big-endian words\n *\n * @private\n * @param {string} str String of raw bytes to be converted to binary representation\n * @param {Array<number>} existingPacked A packed int array of bytes to\n *   append the results to\n * @param {number} existingPackedLen The number of bits in the existingPacked\n *   array\n * @param {number} bigEndianMod Modifier for whether hash function is\n *   big or small endian\n * @return {{value : Array<number>, binLen : number}} Hash list where\n *   \"value\" contains the output number array and \"binLen\" is the binary\n *   length of \"value\"\n */\nfunction bytes2packed(str, existingPacked, existingPackedLen, bigEndianMod) {\n    var packed, codePnt, i, existingByteLen, intOffset,\n        byteOffset, shiftModifier;\n\n    packed = existingPacked || [0];\n    existingPackedLen = existingPackedLen || 0;\n    existingByteLen = existingPackedLen >>> 3;\n    shiftModifier = (bigEndianMod === -1) ? 3 : 0;\n\n    for (i = 0; i < str.length; i += 1) {\n        codePnt = str.charCodeAt(i);\n\n        byteOffset = i + existingByteLen;\n        intOffset = byteOffset >>> 2;\n        if (packed.length <= intOffset) {\n            packed.push(0);\n        }\n        packed[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));\n    }\n\n    return {\"value\": packed, \"binLen\": str.length * 8 + existingPackedLen};\n}\n\n/**\n * Convert a base-64 string to an array of big-endian words\n *\n * @private\n * @param {string} str String to be converted to binary representation\n * @param {Array<number>} existingPacked A packed int array of bytes to\n *   append the results to\n * @param {number} existingPackedLen The number of bits in the existingPacked\n *   array\n * @param {number} bigEndianMod Modifier for whether hash function is\n *   big or small endian\n * @return {{value : Array<number>, binLen : number}} Hash list where\n *   \"value\" contains the output number array and \"binLen\" is the binary\n *   length of \"value\"\n */\nfunction b642packed(str, existingPacked, existingPackedLen, bigEndianMod) {\n    var packed, byteCnt = 0, index, i, j, tmpInt, strPart, firstEqual,\n        b64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n        existingByteLen, intOffset, byteOffset, shiftModifier;\n\n    if (-1 === str.search(/^[a-zA-Z0-9=+\\/]+$/)) {\n        throw new Error(\"Invalid character in base-64 string\");\n    }\n\n    firstEqual = str.indexOf(\"=\");\n    str = str.replace(/\\=/g, \"\");\n    if ((-1 !== firstEqual) && (firstEqual < str.length)) {\n        throw new Error(\"Invalid '=' found in base-64 string\");\n    }\n\n    packed = existingPacked || [0];\n    existingPackedLen = existingPackedLen || 0;\n    existingByteLen = existingPackedLen >>> 3;\n    shiftModifier = (bigEndianMod === -1) ? 3 : 0;\n\n    for (i = 0; i < str.length; i += 4) {\n        strPart = str.substr(i, 4);\n        tmpInt = 0;\n\n        for (j = 0; j < strPart.length; j += 1) {\n            index = b64Tab.indexOf(strPart[j]);\n            tmpInt |= index << (18 - (6 * j));\n        }\n\n        for (j = 0; j < strPart.length - 1; j += 1) {\n            byteOffset = byteCnt + existingByteLen;\n            intOffset = byteOffset >>> 2;\n            while (packed.length <= intOffset) {\n                packed.push(0);\n            }\n            packed[intOffset] |= ((tmpInt >>> (16 - (j * 8))) & 0xFF) <<\n                (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));\n            byteCnt += 1;\n        }\n    }\n\n    return {\"value\": packed, \"binLen\": byteCnt * 8 + existingPackedLen};\n}\n\n/**\n * Convert an ArrayBuffer to an array of big-endian words\n *\n * @private\n * @param {ArrayBuffer} arr ArrayBuffer to be converted to binary\n *   representation\n * @param {Array<number>} existingPacked A packed int array of bytes to\n *   append the results to\n * @param {number} existingPackedLen The number of bits in the existingPacked\n *   array\n * @param {number} bigEndianMod Modifier for whether hash function is\n *   big or small endian\n * @return {{value : Array<number>, binLen : number}} Hash list where\n *   \"value\" contains the output number array and \"binLen\" is the binary\n *   length of \"value\"\n */\nfunction arraybuffer2packed(arr, existingPacked, existingPackedLen, bigEndianMod) {\n    var packed, i, existingByteLen, intOffset, byteOffset, shiftModifier, arrView;\n\n    packed = existingPacked || [0];\n    existingPackedLen = existingPackedLen || 0;\n    existingByteLen = existingPackedLen >>> 3;\n    shiftModifier = (bigEndianMod === -1) ? 3 : 0;\n    arrView = new Uint8Array(arr);\n\n    for (i = 0; i < arr.byteLength; i += 1) {\n        byteOffset = i + existingByteLen;\n        intOffset = byteOffset >>> 2;\n        if (packed.length <= intOffset) {\n            packed.push(0);\n        }\n        packed[intOffset] |= arrView[i] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));\n    }\n\n    return {\"value\": packed, \"binLen\": arr.byteLength * 8 + existingPackedLen};\n}\n\n/**\n * Convert an array of big-endian words to a hex string.\n *\n * @private\n * @param {Array<number>} packed Array of integers to be converted to\n *   hexidecimal representation\n * @param {number} outputLength Length of output in bits\n * @param {number} bigEndianMod Modifier for whether hash function is\n *   big or small endian\n * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list\n *   containing validated output formatting options\n * @return {string} Hexidecimal representation of the parameter in string\n *   form\n */\nfunction packed2hex(packed, outputLength, bigEndianMod, formatOpts) {\n    var hex_tab = \"0123456789abcdef\", str = \"\",\n        length = outputLength / 8, i, srcByte, shiftModifier;\n\n    shiftModifier = (bigEndianMod === -1) ? 3 : 0;\n\n    for (i = 0; i < length; i += 1) {\n        /* The below is more than a byte but it gets taken care of later */\n        srcByte = packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)));\n        str += hex_tab.charAt((srcByte >>> 4) & 0xF) +\n            hex_tab.charAt(srcByte & 0xF);\n    }\n\n    return (formatOpts[\"outputUpper\"]) ? str.toUpperCase() : str;\n}\n\n/**\n * Convert an array of big-endian words to a base-64 string\n *\n * @private\n * @param {Array<number>} packed Array of integers to be converted to\n *   base-64 representation\n * @param {number} outputLength Length of output in bits\n * @param {number} bigEndianMod Modifier for whether hash function is\n *   big or small endian\n * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list\n *   containing validated output formatting options\n * @return {string} Base-64 encoded representation of the parameter in\n *   string form\n */\nfunction packed2b64(packed, outputLength, bigEndianMod, formatOpts) {\n    var str = \"\", length = outputLength / 8, i, j, triplet, int1, int2, shiftModifier,\n        b64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    shiftModifier = (bigEndianMod === -1) ? 3 : 0;\n\n    for (i = 0; i < length; i += 3) {\n        int1 = ((i + 1) < length) ? packed[(i + 1) >>> 2] : 0;\n        int2 = ((i + 2) < length) ? packed[(i + 2) >>> 2] : 0;\n        triplet = (((packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF) << 16) |\n            (((int1 >>> (8 * (shiftModifier + bigEndianMod * ((i + 1) % 4)))) & 0xFF) << 8) |\n            ((int2 >>> (8 * (shiftModifier + bigEndianMod * ((i + 2) % 4)))) & 0xFF);\n        for (j = 0; j < 4; j += 1) {\n            if (i * 8 + j * 6 <= outputLength) {\n                str += b64Tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);\n            } else {\n                str += formatOpts[\"b64Pad\"];\n            }\n        }\n    }\n    return str;\n}\n\n/**\n * Convert an array of big-endian words to raw bytes string\n *\n * @private\n * @param {Array<number>} packed Array of integers to be converted to\n *   a raw bytes string representation\n * @param {number} outputLength Length of output in bits\n * @param {number} bigEndianMod Modifier for whether hash function is\n *   big or small endian\n * @return {string} Raw bytes representation of the parameter in string\n *   form\n */\nfunction packed2bytes(packed, outputLength, bigEndianMod) {\n    var str = \"\", length = outputLength / 8, i, srcByte, shiftModifier;\n\n    shiftModifier = (bigEndianMod === -1) ? 3 : 0;\n\n    for (i = 0; i < length; i += 1) {\n        srcByte = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF;\n        str += String.fromCharCode(srcByte);\n    }\n\n    return str;\n}\n\n/**\n * Convert an array of big-endian words to an ArrayBuffer\n *\n * @private\n * @param {Array<number>} packed Array of integers to be converted to\n *   an ArrayBuffer\n * @param {number} outputLength Length of output in bits\n * @param {number} bigEndianMod Modifier for whether hash function is\n *   big or small endian\n * @return {ArrayBuffer} Raw bytes representation of the parameter in an\n *   ArrayBuffer\n */\nfunction packed2arraybuffer(packed, outputLength, bigEndianMod) {\n    var length = outputLength / 8, i, retVal = new ArrayBuffer(length), shiftModifier, arrView;\n    arrView = new Uint8Array(retVal);\n\n    shiftModifier = (bigEndianMod === -1) ? 3 : 0;\n\n    for (i = 0; i < length; i += 1) {\n        arrView[i] = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF;\n    }\n\n    return retVal;\n}\n\n/**\n * Validate hash list containing output formatting options, ensuring\n * presence of every option or adding the default value\n *\n * @private\n * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),\n *   shakeLen : (number|undefined)}=} options Hash list of output formatting options\n * @return {{outputUpper : boolean, b64Pad : string, shakeLen : number}} Validated\n *   hash list containing output formatting options\n */\nfunction getOutputOpts(options) {\n    var retVal = {\"outputUpper\": false, \"b64Pad\": \"=\", \"shakeLen\": -1},\n        outputOptions;\n    outputOptions = options || {};\n\n    retVal[\"outputUpper\"] = outputOptions[\"outputUpper\"] || false;\n\n    if (true === outputOptions.hasOwnProperty(\"b64Pad\")) {\n        retVal[\"b64Pad\"] = outputOptions[\"b64Pad\"];\n    }\n\n    if ((true === outputOptions.hasOwnProperty(\"shakeLen\")) && ((8 & SUPPORTED_ALGS) !== 0)) {\n        if (outputOptions[\"shakeLen\"] % 8 !== 0) {\n            throw new Error(\"shakeLen must be a multiple of 8\");\n        }\n        retVal[\"shakeLen\"] = outputOptions[\"shakeLen\"];\n    }\n\n    if (\"boolean\" !== typeof (retVal[\"outputUpper\"])) {\n        throw new Error(\"Invalid outputUpper formatting option\");\n    }\n\n    if (\"string\" !== typeof (retVal[\"b64Pad\"])) {\n        throw new Error(\"Invalid b64Pad formatting option\");\n    }\n\n    return retVal;\n}\n\n/**\n * Function that takes an input format and UTF encoding and returns the\n * appropriate function used to convert the input.\n *\n * @private\n * @param {string} format The format of the string to be converted\n * @param {string} utfType The string encoding to use (UTF8, UTF16BE,\n *    UTF16LE)\n * @param {number} bigEndianMod Modifier for whether hash function is\n *   big or small endian\n * @return {function((string|ArrayBuffer), Array<number>=, number=): {value :\n *   Array<number>, binLen : number}} Function that will convert an input\n *   string to a packed int array\n */\nfunction getStrConverter(format, utfType, bigEndianMod) {\n    var retVal;\n\n    /* Validate encoding */\n    switch (utfType) {\n        case \"UTF8\":\n        /* Fallthrough */\n        case \"UTF16BE\":\n        /* Fallthrough */\n        case \"UTF16LE\":\n            /* Fallthrough */\n            break;\n        default:\n            throw new Error(\"encoding must be UTF8, UTF16BE, or UTF16LE\");\n    }\n\n    /* Map inputFormat to the appropriate converter */\n    switch (format) {\n        case \"HEX\":\n            /**\n             * @param {string} str String of raw bytes to be converted to binary representation\n             * @param {Array<number>} existingBin A packed int array of bytes to\n             *   append the results to\n             * @param {number} existingBinLen The number of bits in the existingBin\n             *   array\n             * @return {{value : Array<number>, binLen : number}} Hash list where\n             *   \"value\" contains the output number array and \"binLen\" is the binary\n             *   length of \"value\"\n             */\n            retVal = function (str, existingBin, existingBinLen) {\n                return hex2packed(str, existingBin, existingBinLen, bigEndianMod);\n            };\n            break;\n        case \"TEXT\":\n            /**\n             * @param {string} str String of raw bytes to be converted to binary representation\n             * @param {Array<number>} existingBin A packed int array of bytes to\n             *   append the results to\n             * @param {number} existingBinLen The number of bits in the existingBin\n             *   array\n             * @return {{value : Array<number>, binLen : number}} Hash list where\n             *   \"value\" contains the output number array and \"binLen\" is the binary\n             *   length of \"value\"\n             */\n            retVal = function (str, existingBin, existingBinLen) {\n                return str2packed(str, utfType, existingBin, existingBinLen, bigEndianMod);\n            };\n            break;\n        case \"B64\":\n            /**\n             * @param {string} str String of raw bytes to be converted to binary representation\n             * @param {Array<number>} existingBin A packed int array of bytes to\n             *   append the results to\n             * @param {number} existingBinLen The number of bits in the existingBin\n             *   array\n             * @return {{value : Array<number>, binLen : number}} Hash list where\n             *   \"value\" contains the output number array and \"binLen\" is the binary\n             *   length of \"value\"\n             */\n            retVal = function (str, existingBin, existingBinLen) {\n                return b642packed(str, existingBin, existingBinLen, bigEndianMod);\n            };\n            break;\n        case \"BYTES\":\n            /**\n             * @param {string} str String of raw bytes to be converted to binary representation\n             * @param {Array<number>} existingBin A packed int array of bytes to\n             *   append the results to\n             * @param {number} existingBinLen The number of bits in the existingBin\n             *   array\n             * @return {{value : Array<number>, binLen : number}} Hash list where\n             *   \"value\" contains the output number array and \"binLen\" is the binary\n             *   length of \"value\"\n             */\n            retVal = function (str, existingBin, existingBinLen) {\n                return bytes2packed(str, existingBin, existingBinLen, bigEndianMod);\n            };\n            break;\n        case \"ARRAYBUFFER\":\n            try {\n                retVal = new ArrayBuffer(0);\n            } catch (ignore) {\n                throw new Error(\"ARRAYBUFFER not supported by this environment\");\n            }\n            /**\n             * @param {ArrayBuffer} arr ArrayBuffer to be converted to binary\n             *   representation\n             * @param {Array<number>} existingBin A packed int array of bytes to\n             *   append the results to\n             * @param {number} existingBinLen The number of bits in the existingBin\n             *   array\n             * @return {{value : Array<number>, binLen : number}} Hash list where\n             *   \"value\" contains the output number array and \"binLen\" is the binary\n             *   length of \"value\"\n             */\n            retVal = function (arr, existingBin, existingBinLen) {\n                return arraybuffer2packed(arr, existingBin, existingBinLen, bigEndianMod);\n            };\n            break;\n        default:\n            throw new Error(\"format must be HEX, TEXT, B64, BYTES, or ARRAYBUFFER\");\n    }\n\n    return retVal;\n}\n\n/**\n * The 32-bit implementation of circular rotate left\n *\n * @private\n * @param {number} x The 32-bit integer argument\n * @param {number} n The number of bits to shift\n * @return {number} The x shifted circularly by n bits\n */\nfunction rotl_32(x, n) {\n    return (x << n) | (x >>> (32 - n));\n}\n\n/**\n * The 64-bit implementation of circular rotate left\n *\n * @private\n * @param {Int_64} x The 64-bit integer argument\n * @param {number} n The number of bits to shift\n * @return {Int_64} The x shifted circularly by n bits\n */\nfunction rotl_64(x, n) {\n    if (n > 32) {\n        n = n - 32;\n        return new Int_64(\n            x.lowOrder << n | x.highOrder >>> (32 - n),\n            x.highOrder << n | x.lowOrder >>> (32 - n)\n        );\n    } else if (0 !== n) {\n        return new Int_64(\n            x.highOrder << n | x.lowOrder >>> (32 - n),\n            x.lowOrder << n | x.highOrder >>> (32 - n)\n        );\n    } else {\n        return x;\n    }\n}\n\n/**\n * The 32-bit implementation of circular rotate right\n *\n * @private\n * @param {number} x The 32-bit integer argument\n * @param {number} n The number of bits to shift\n * @return {number} The x shifted circularly by n bits\n */\nfunction rotr_32(x, n) {\n    return (x >>> n) | (x << (32 - n));\n}\n\n/**\n * The 64-bit implementation of circular rotate right\n *\n * @private\n * @param {Int_64} x The 64-bit integer argument\n * @param {number} n The number of bits to shift\n * @return {Int_64} The x shifted circularly by n bits\n */\nfunction rotr_64(x, n) {\n    var retVal = null, tmp = new Int_64(x.highOrder, x.lowOrder);\n\n    if (32 >= n) {\n        retVal = new Int_64(\n            (tmp.highOrder >>> n) | ((tmp.lowOrder << (32 - n)) & 0xFFFFFFFF),\n            (tmp.lowOrder >>> n) | ((tmp.highOrder << (32 - n)) & 0xFFFFFFFF)\n        );\n    } else {\n        retVal = new Int_64(\n            (tmp.lowOrder >>> (n - 32)) | ((tmp.highOrder << (64 - n)) & 0xFFFFFFFF),\n            (tmp.highOrder >>> (n - 32)) | ((tmp.lowOrder << (64 - n)) & 0xFFFFFFFF)\n        );\n    }\n\n    return retVal;\n}\n\n/**\n * The 32-bit implementation of shift right\n *\n * @private\n * @param {number} x The 32-bit integer argument\n * @param {number} n The number of bits to shift\n * @return {number} The x shifted by n bits\n */\nfunction shr_32(x, n) {\n    return x >>> n;\n}\n\n/**\n * The 64-bit implementation of shift right\n *\n * @private\n * @param {Int_64} x The 64-bit integer argument\n * @param {number} n The number of bits to shift\n * @return {Int_64} The x shifted by n bits\n */\nfunction shr_64(x, n) {\n    var retVal = null;\n\n    if (32 >= n) {\n        retVal = new Int_64(\n            x.highOrder >>> n,\n            x.lowOrder >>> n | ((x.highOrder << (32 - n)) & 0xFFFFFFFF)\n        );\n    } else {\n        retVal = new Int_64(\n            0,\n            x.highOrder >>> (n - 32)\n        );\n    }\n\n    return retVal;\n}\n\n/**\n * The 32-bit implementation of the NIST specified Parity function\n *\n * @private\n * @param {number} x The first 32-bit integer argument\n * @param {number} y The second 32-bit integer argument\n * @param {number} z The third 32-bit integer argument\n * @return {number} The NIST specified output of the function\n */\nfunction parity_32(x, y, z) {\n    return x ^ y ^ z;\n}\n\n/**\n * The 32-bit implementation of the NIST specified Ch function\n *\n * @private\n * @param {number} x The first 32-bit integer argument\n * @param {number} y The second 32-bit integer argument\n * @param {number} z The third 32-bit integer argument\n * @return {number} The NIST specified output of the function\n */\nfunction ch_32(x, y, z) {\n    return (x & y) ^ (~x & z);\n}\n\n/**\n * The 64-bit implementation of the NIST specified Ch function\n *\n * @private\n * @param {Int_64} x The first 64-bit integer argument\n * @param {Int_64} y The second 64-bit integer argument\n * @param {Int_64} z The third 64-bit integer argument\n * @return {Int_64} The NIST specified output of the function\n */\nfunction ch_64(x, y, z) {\n    return new Int_64(\n        (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),\n        (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)\n    );\n}\n\n/**\n * The 32-bit implementation of the NIST specified Maj function\n *\n * @private\n * @param {number} x The first 32-bit integer argument\n * @param {number} y The second 32-bit integer argument\n * @param {number} z The third 32-bit integer argument\n * @return {number} The NIST specified output of the function\n */\nfunction maj_32(x, y, z) {\n    return (x & y) ^ (x & z) ^ (y & z);\n}\n\n/**\n * The 64-bit implementation of the NIST specified Maj function\n *\n * @private\n * @param {Int_64} x The first 64-bit integer argument\n * @param {Int_64} y The second 64-bit integer argument\n * @param {Int_64} z The third 64-bit integer argument\n * @return {Int_64} The NIST specified output of the function\n */\nfunction maj_64(x, y, z) {\n    return new Int_64(\n        (x.highOrder & y.highOrder) ^\n        (x.highOrder & z.highOrder) ^\n        (y.highOrder & z.highOrder),\n        (x.lowOrder & y.lowOrder) ^\n        (x.lowOrder & z.lowOrder) ^\n        (y.lowOrder & z.lowOrder)\n    );\n}\n\n/**\n * The 32-bit implementation of the NIST specified Sigma0 function\n *\n * @private\n * @param {number} x The 32-bit integer argument\n * @return {number} The NIST specified output of the function\n */\nfunction sigma0_32(x) {\n    return rotr_32(x, 2) ^ rotr_32(x, 13) ^ rotr_32(x, 22);\n}\n\n/**\n * The 64-bit implementation of the NIST specified Sigma0 function\n *\n * @private\n * @param {Int_64} x The 64-bit integer argument\n * @return {Int_64} The NIST specified output of the function\n */\nfunction sigma0_64(x) {\n    var rotr28 = rotr_64(x, 28), rotr34 = rotr_64(x, 34),\n        rotr39 = rotr_64(x, 39);\n\n    return new Int_64(\n        rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,\n        rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder);\n}\n\n/**\n * The 32-bit implementation of the NIST specified Sigma1 function\n *\n * @private\n * @param {number} x The 32-bit integer argument\n * @return {number} The NIST specified output of the function\n */\nfunction sigma1_32(x) {\n    return rotr_32(x, 6) ^ rotr_32(x, 11) ^ rotr_32(x, 25);\n}\n\n/**\n * The 64-bit implementation of the NIST specified Sigma1 function\n *\n * @private\n * @param {Int_64} x The 64-bit integer argument\n * @return {Int_64} The NIST specified output of the function\n */\nfunction sigma1_64(x) {\n    var rotr14 = rotr_64(x, 14), rotr18 = rotr_64(x, 18),\n        rotr41 = rotr_64(x, 41);\n\n    return new Int_64(\n        rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,\n        rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder);\n}\n\n/**\n * The 32-bit implementation of the NIST specified Gamma0 function\n *\n * @private\n * @param {number} x The 32-bit integer argument\n * @return {number} The NIST specified output of the function\n */\nfunction gamma0_32(x) {\n    return rotr_32(x, 7) ^ rotr_32(x, 18) ^ shr_32(x, 3);\n}\n\n/**\n * The 64-bit implementation of the NIST specified Gamma0 function\n *\n * @private\n * @param {Int_64} x The 64-bit integer argument\n * @return {Int_64} The NIST specified output of the function\n */\nfunction gamma0_64(x) {\n    var rotr1 = rotr_64(x, 1), rotr8 = rotr_64(x, 8), shr7 = shr_64(x, 7);\n\n    return new Int_64(\n        rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,\n        rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder\n    );\n}\n\n/**\n * The 32-bit implementation of the NIST specified Gamma1 function\n *\n * @private\n * @param {number} x The 32-bit integer argument\n * @return {number} The NIST specified output of the function\n */\nfunction gamma1_32(x) {\n    return rotr_32(x, 17) ^ rotr_32(x, 19) ^ shr_32(x, 10);\n}\n\n/**\n * The 64-bit implementation of the NIST specified Gamma1 function\n *\n * @private\n * @param {Int_64} x The 64-bit integer argument\n * @return {Int_64} The NIST specified output of the function\n */\nfunction gamma1_64(x) {\n    var rotr19 = rotr_64(x, 19), rotr61 = rotr_64(x, 61),\n        shr6 = shr_64(x, 6);\n\n    return new Int_64(\n        rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,\n        rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder\n    );\n}\n\n/**\n * Add two 32-bit integers, wrapping at 2^32. This uses 16-bit operations\n * internally to work around bugs in some JS interpreters.\n *\n * @private\n * @param {number} a The first 32-bit integer argument to be added\n * @param {number} b The second 32-bit integer argument to be added\n * @return {number} The sum of a + b\n */\nfunction safeAdd_32_2(a, b) {\n    var lsw = (a & 0xFFFF) + (b & 0xFFFF),\n        msw = (a >>> 16) + (b >>> 16) + (lsw >>> 16);\n\n    return ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\n}\n\n/**\n * Add four 32-bit integers, wrapping at 2^32. This uses 16-bit operations\n * internally to work around bugs in some JS interpreters.\n *\n * @private\n * @param {number} a The first 32-bit integer argument to be added\n * @param {number} b The second 32-bit integer argument to be added\n * @param {number} c The third 32-bit integer argument to be added\n * @param {number} d The fourth 32-bit integer argument to be added\n * @return {number} The sum of a + b + c + d\n */\nfunction safeAdd_32_4(a, b, c, d) {\n    var lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF),\n        msw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +\n            (lsw >>> 16);\n\n    return ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\n}\n\n/**\n * Add five 32-bit integers, wrapping at 2^32. This uses 16-bit operations\n * internally to work around bugs in some JS interpreters.\n *\n * @private\n * @param {number} a The first 32-bit integer argument to be added\n * @param {number} b The second 32-bit integer argument to be added\n * @param {number} c The third 32-bit integer argument to be added\n * @param {number} d The fourth 32-bit integer argument to be added\n * @param {number} e The fifth 32-bit integer argument to be added\n * @return {number} The sum of a + b + c + d + e\n */\nfunction safeAdd_32_5(a, b, c, d, e) {\n    var lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF) +\n        (e & 0xFFFF),\n        msw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +\n            (e >>> 16) + (lsw >>> 16);\n\n    return ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\n}\n\n/**\n * Add two 64-bit integers, wrapping at 2^64. This uses 16-bit operations\n * internally to work around bugs in some JS interpreters.\n *\n * @private\n * @param {Int_64} x The first 64-bit integer argument to be added\n * @param {Int_64} y The second 64-bit integer argument to be added\n * @return {Int_64} The sum of x + y\n */\nfunction safeAdd_64_2(x, y) {\n    var lsw, msw, lowOrder, highOrder;\n\n    lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);\n    msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);\n    lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\n\n    lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);\n    msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);\n    highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\n\n    return new Int_64(highOrder, lowOrder);\n}\n\n/**\n * Add four 64-bit integers, wrapping at 2^64. This uses 16-bit operations\n * internally to work around bugs in some JS interpreters.\n *\n * @private\n * @param {Int_64} a The first 64-bit integer argument to be added\n * @param {Int_64} b The second 64-bit integer argument to be added\n * @param {Int_64} c The third 64-bit integer argument to be added\n * @param {Int_64} d The fouth 64-bit integer argument to be added\n * @return {Int_64} The sum of a + b + c + d\n */\nfunction safeAdd_64_4(a, b, c, d) {\n    var lsw, msw, lowOrder, highOrder;\n\n    lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) +\n        (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);\n    msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) +\n        (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);\n    lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\n\n    lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) +\n        (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);\n    msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) +\n        (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);\n    highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\n\n    return new Int_64(highOrder, lowOrder);\n}\n\n/**\n * Add five 64-bit integers, wrapping at 2^64. This uses 16-bit operations\n * internally to work around bugs in some JS interpreters.\n *\n * @private\n * @param {Int_64} a The first 64-bit integer argument to be added\n * @param {Int_64} b The second 64-bit integer argument to be added\n * @param {Int_64} c The third 64-bit integer argument to be added\n * @param {Int_64} d The fouth 64-bit integer argument to be added\n * @param {Int_64} e The fouth 64-bit integer argument to be added\n * @return {Int_64} The sum of a + b + c + d + e\n */\nfunction safeAdd_64_5(a, b, c, d, e) {\n    var lsw, msw, lowOrder, highOrder;\n\n    lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) +\n        (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) +\n        (e.lowOrder & 0xFFFF);\n    msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) +\n        (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) +\n        (lsw >>> 16);\n    lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\n\n    lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) +\n        (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) +\n        (e.highOrder & 0xFFFF) + (msw >>> 16);\n    msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) +\n        (c.highOrder >>> 16) + (d.highOrder >>> 16) +\n        (e.highOrder >>> 16) + (lsw >>> 16);\n    highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\n\n    return new Int_64(highOrder, lowOrder);\n}\n\n/**\n * XORs two given arguments.\n *\n * @private\n * @param {Int_64} a First argument to be XORed\n * @param {Int_64} b Second argument to be XORed\n * @return {Int_64} The XOR of the arguments\n */\nfunction xor_64_2(a, b) {\n    return new Int_64(\n        a.highOrder ^ b.highOrder,\n        a.lowOrder ^ b.lowOrder\n    );\n}\n\n/**\n * XORs five given arguments.\n *\n * @private\n * @param {Int_64} a First argument to be XORed\n * @param {Int_64} b Second argument to be XORed\n * @param {Int_64} c Third argument to be XORed\n * @param {Int_64} d Fourth argument to be XORed\n * @param {Int_64} e Fifth argument to be XORed\n * @return {Int_64} The XOR of the arguments\n */\nfunction xor_64_5(a, b, c, d, e) {\n    return new Int_64(\n        a.highOrder ^ b.highOrder ^ c.highOrder ^ d.highOrder ^ e.highOrder,\n        a.lowOrder ^ b.lowOrder ^ c.lowOrder ^ d.lowOrder ^ e.lowOrder\n    );\n}\n\n/**\n * Returns a clone of the given SHA3 state\n *\n * @private\n * @param {Array<Array<Int_64>>} state The state to be cloned\n * @return {Array<Array<Int_64>>} The cloned state\n */\nfunction cloneSHA3State(state) {\n    var clone = [], i;\n    for (i = 0; i < 5; i += 1) {\n        clone[i] = state[i].slice();\n    }\n\n    return clone;\n}\n\n/**\n * Gets the state values for the specified SHA variant\n *\n * @param {string} variant The SHA variant\n * @return {Array<number|Int_64|Array<null>>} The initial state values\n */\nfunction getNewState(variant) {\n    var retVal = [], H_trunc, H_full, i;\n\n    if ((\"SHA-1\" === variant) && ((1 & SUPPORTED_ALGS) !== 0)) {\n        retVal = [\n            0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0\n        ];\n    } else if ((variant.lastIndexOf(\"SHA-\", 0) === 0) && ((6 & SUPPORTED_ALGS) !== 0)) {\n        H_trunc = [\n            0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n            0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4\n        ];\n        H_full = [\n            0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,\n            0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19\n        ];\n\n        switch (variant) {\n            case \"SHA-224\":\n                retVal = H_trunc;\n                break;\n            case \"SHA-256\":\n                retVal = H_full;\n                break;\n            case \"SHA-384\":\n                retVal = [\n                    new Int_64(0xcbbb9d5d, H_trunc[0]),\n                    new Int_64(0x0629a292a, H_trunc[1]),\n                    new Int_64(0x9159015a, H_trunc[2]),\n                    new Int_64(0x0152fecd8, H_trunc[3]),\n                    new Int_64(0x67332667, H_trunc[4]),\n                    new Int_64(0x98eb44a87, H_trunc[5]),\n                    new Int_64(0xdb0c2e0d, H_trunc[6]),\n                    new Int_64(0x047b5481d, H_trunc[7])\n                ];\n                break;\n            case \"SHA-512\":\n                retVal = [\n                    new Int_64(H_full[0], 0xf3bcc908),\n                    new Int_64(H_full[1], 0x84caa73b),\n                    new Int_64(H_full[2], 0xfe94f82b),\n                    new Int_64(H_full[3], 0x5f1d36f1),\n                    new Int_64(H_full[4], 0xade682d1),\n                    new Int_64(H_full[5], 0x2b3e6c1f),\n                    new Int_64(H_full[6], 0xfb41bd6b),\n                    new Int_64(H_full[7], 0x137e2179)\n                ];\n                break;\n            default:\n                throw new Error(\"Unknown SHA variant\");\n        }\n    } else if (((variant.lastIndexOf(\"SHA3-\", 0) === 0) || (variant.lastIndexOf(\"SHAKE\", 0) === 0)) &&\n        ((8 & SUPPORTED_ALGS) !== 0)) {\n        for (i = 0; i < 5; i += 1) {\n            retVal[i] = [new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0)];\n        }\n    } else {\n        throw new Error(\"No SHA variants supported\");\n    }\n\n    return retVal;\n}\n\n/**\n * Performs a round of SHA-1 hashing over a 512-byte block\n *\n * @private\n * @param {Array<number>} block The binary array representation of the\n *   block to hash\n * @param {Array<number>} H The intermediate H values from a previous\n *   round\n * @return {Array<number>} The resulting H values\n */\nfunction roundSHA1(block, H) {\n    var W = [], a, b, c, d, e, T, ch = ch_32, parity = parity_32,\n        maj = maj_32, rotl = rotl_32, safeAdd_2 = safeAdd_32_2, t,\n        safeAdd_5 = safeAdd_32_5;\n\n    a = H[0];\n    b = H[1];\n    c = H[2];\n    d = H[3];\n    e = H[4];\n\n    for (t = 0; t < 80; t += 1) {\n        if (t < 16) {\n            W[t] = block[t];\n        } else {\n            W[t] = rotl(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n        }\n\n        if (t < 20) {\n            T = safeAdd_5(rotl(a, 5), ch(b, c, d), e, 0x5a827999, W[t]);\n        } else if (t < 40) {\n            T = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0x6ed9eba1, W[t]);\n        } else if (t < 60) {\n            T = safeAdd_5(rotl(a, 5), maj(b, c, d), e, 0x8f1bbcdc, W[t]);\n        } else {\n            T = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0xca62c1d6, W[t]);\n        }\n\n        e = d;\n        d = c;\n        c = rotl(b, 30);\n        b = a;\n        a = T;\n    }\n\n    H[0] = safeAdd_2(a, H[0]);\n    H[1] = safeAdd_2(b, H[1]);\n    H[2] = safeAdd_2(c, H[2]);\n    H[3] = safeAdd_2(d, H[3]);\n    H[4] = safeAdd_2(e, H[4]);\n\n    return H;\n}\n\n/**\n * Finalizes the SHA-1 hash\n *\n * @private\n * @param {Array<number>} remainder Any leftover unprocessed packed ints\n *   that still need to be processed\n * @param {number} remainderBinLen The number of bits in remainder\n * @param {number} processedBinLen The number of bits already\n *   processed\n * @param {Array<number>} H The intermediate H values from a previous\n *   round\n * @param {number} outputLen Unused for this variant\n * @return {Array<number>} The array of integers representing the SHA-1\n *   hash of message\n */\nfunction finalizeSHA1(remainder, remainderBinLen, processedBinLen, H, outputLen) {\n    var i, appendedMessageLength, offset, totalLen;\n\n    /* The 65 addition is a hack but it works.  The correct number is\n       actually 72 (64 + 8) but the below math fails if\n       remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,\n       \"shorting\" the addition is OK. */\n    offset = (((remainderBinLen + 65) >>> 9) << 4) + 15;\n    while (remainder.length <= offset) {\n        remainder.push(0);\n    }\n    /* Append '1' at the end of the binary string */\n    remainder[remainderBinLen >>> 5] |= 0x80 << (24 - (remainderBinLen % 32));\n    /* Append length of binary string in the position such that the new\n     * length is a multiple of 512.  Logic does not work for even multiples\n     * of 512 but there can never be even multiples of 512. JavaScript\n     * numbers are limited to 2^53 so it's \"safe\" to treat the totalLen as\n     * a 64-bit integer. */\n    totalLen = remainderBinLen + processedBinLen;\n    remainder[offset] = totalLen & 0xFFFFFFFF;\n    /* Bitwise operators treat the operand as a 32-bit number so need to\n     * use hacky division and round to get access to upper 32-ish bits */\n    remainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;\n\n    appendedMessageLength = remainder.length;\n\n    /* This will always be at least 1 full chunk */\n    for (i = 0; i < appendedMessageLength; i += 16) {\n        H = roundSHA1(remainder.slice(i, i + 16), H);\n    }\n\n    return H;\n}\n\n/* Put this here so the K arrays aren't put on the stack for every block */\nvar K_sha2, K_sha512, r_sha3, rc_sha3;\nif ((6 & SUPPORTED_ALGS) !== 0) {\n    K_sha2 = [\n        0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,\n        0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,\n        0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,\n        0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,\n        0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,\n        0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,\n        0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,\n        0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,\n        0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,\n        0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,\n        0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,\n        0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,\n        0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,\n        0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,\n        0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,\n        0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2\n    ];\n\n    if ((4 & SUPPORTED_ALGS) !== 0) {\n        K_sha512 = [\n            new Int_64(K_sha2[0], 0xd728ae22), new Int_64(K_sha2[1], 0x23ef65cd),\n            new Int_64(K_sha2[2], 0xec4d3b2f), new Int_64(K_sha2[3], 0x8189dbbc),\n            new Int_64(K_sha2[4], 0xf348b538), new Int_64(K_sha2[5], 0xb605d019),\n            new Int_64(K_sha2[6], 0xaf194f9b), new Int_64(K_sha2[7], 0xda6d8118),\n            new Int_64(K_sha2[8], 0xa3030242), new Int_64(K_sha2[9], 0x45706fbe),\n            new Int_64(K_sha2[10], 0x4ee4b28c), new Int_64(K_sha2[11], 0xd5ffb4e2),\n            new Int_64(K_sha2[12], 0xf27b896f), new Int_64(K_sha2[13], 0x3b1696b1),\n            new Int_64(K_sha2[14], 0x25c71235), new Int_64(K_sha2[15], 0xcf692694),\n            new Int_64(K_sha2[16], 0x9ef14ad2), new Int_64(K_sha2[17], 0x384f25e3),\n            new Int_64(K_sha2[18], 0x8b8cd5b5), new Int_64(K_sha2[19], 0x77ac9c65),\n            new Int_64(K_sha2[20], 0x592b0275), new Int_64(K_sha2[21], 0x6ea6e483),\n            new Int_64(K_sha2[22], 0xbd41fbd4), new Int_64(K_sha2[23], 0x831153b5),\n            new Int_64(K_sha2[24], 0xee66dfab), new Int_64(K_sha2[25], 0x2db43210),\n            new Int_64(K_sha2[26], 0x98fb213f), new Int_64(K_sha2[27], 0xbeef0ee4),\n            new Int_64(K_sha2[28], 0x3da88fc2), new Int_64(K_sha2[29], 0x930aa725),\n            new Int_64(K_sha2[30], 0xe003826f), new Int_64(K_sha2[31], 0x0a0e6e70),\n            new Int_64(K_sha2[32], 0x46d22ffc), new Int_64(K_sha2[33], 0x5c26c926),\n            new Int_64(K_sha2[34], 0x5ac42aed), new Int_64(K_sha2[35], 0x9d95b3df),\n            new Int_64(K_sha2[36], 0x8baf63de), new Int_64(K_sha2[37], 0x3c77b2a8),\n            new Int_64(K_sha2[38], 0x47edaee6), new Int_64(K_sha2[39], 0x1482353b),\n            new Int_64(K_sha2[40], 0x4cf10364), new Int_64(K_sha2[41], 0xbc423001),\n            new Int_64(K_sha2[42], 0xd0f89791), new Int_64(K_sha2[43], 0x0654be30),\n            new Int_64(K_sha2[44], 0xd6ef5218), new Int_64(K_sha2[45], 0x5565a910),\n            new Int_64(K_sha2[46], 0x5771202a), new Int_64(K_sha2[47], 0x32bbd1b8),\n            new Int_64(K_sha2[48], 0xb8d2d0c8), new Int_64(K_sha2[49], 0x5141ab53),\n            new Int_64(K_sha2[50], 0xdf8eeb99), new Int_64(K_sha2[51], 0xe19b48a8),\n            new Int_64(K_sha2[52], 0xc5c95a63), new Int_64(K_sha2[53], 0xe3418acb),\n            new Int_64(K_sha2[54], 0x7763e373), new Int_64(K_sha2[55], 0xd6b2b8a3),\n            new Int_64(K_sha2[56], 0x5defb2fc), new Int_64(K_sha2[57], 0x43172f60),\n            new Int_64(K_sha2[58], 0xa1f0ab72), new Int_64(K_sha2[59], 0x1a6439ec),\n            new Int_64(K_sha2[60], 0x23631e28), new Int_64(K_sha2[61], 0xde82bde9),\n            new Int_64(K_sha2[62], 0xb2c67915), new Int_64(K_sha2[63], 0xe372532b),\n            new Int_64(0xca273ece, 0xea26619c), new Int_64(0xd186b8c7, 0x21c0c207),\n            new Int_64(0xeada7dd6, 0xcde0eb1e), new Int_64(0xf57d4f7f, 0xee6ed178),\n            new Int_64(0x06f067aa, 0x72176fba), new Int_64(0x0a637dc5, 0xa2c898a6),\n            new Int_64(0x113f9804, 0xbef90dae), new Int_64(0x1b710b35, 0x131c471b),\n            new Int_64(0x28db77f5, 0x23047d84), new Int_64(0x32caab7b, 0x40c72493),\n            new Int_64(0x3c9ebe0a, 0x15c9bebc), new Int_64(0x431d67c4, 0x9c100d4c),\n            new Int_64(0x4cc5d4be, 0xcb3e42b6), new Int_64(0x597f299c, 0xfc657e2a),\n            new Int_64(0x5fcb6fab, 0x3ad6faec), new Int_64(0x6c44198c, 0x4a475817)\n        ];\n    }\n}\nif ((8 & SUPPORTED_ALGS) !== 0) {\n    rc_sha3 = [\n        new Int_64(0x00000000, 0x00000001), new Int_64(0x00000000, 0x00008082),\n        new Int_64(0x80000000, 0x0000808A), new Int_64(0x80000000, 0x80008000),\n        new Int_64(0x00000000, 0x0000808B), new Int_64(0x00000000, 0x80000001),\n        new Int_64(0x80000000, 0x80008081), new Int_64(0x80000000, 0x00008009),\n        new Int_64(0x00000000, 0x0000008A), new Int_64(0x00000000, 0x00000088),\n        new Int_64(0x00000000, 0x80008009), new Int_64(0x00000000, 0x8000000A),\n        new Int_64(0x00000000, 0x8000808B), new Int_64(0x80000000, 0x0000008B),\n        new Int_64(0x80000000, 0x00008089), new Int_64(0x80000000, 0x00008003),\n        new Int_64(0x80000000, 0x00008002), new Int_64(0x80000000, 0x00000080),\n        new Int_64(0x00000000, 0x0000800A), new Int_64(0x80000000, 0x8000000A),\n        new Int_64(0x80000000, 0x80008081), new Int_64(0x80000000, 0x00008080),\n        new Int_64(0x00000000, 0x80000001), new Int_64(0x80000000, 0x80008008)\n    ];\n\n    r_sha3 = [\n        [0, 36, 3, 41, 18],\n        [1, 44, 10, 45, 2],\n        [62, 6, 43, 15, 61],\n        [28, 55, 25, 21, 56],\n        [27, 20, 39, 8, 14]\n    ];\n}\n\n/**\n * Performs a round of SHA-2 hashing over a block\n *\n * @private\n * @param {Array<number>} block The binary array representation of the\n *   block to hash\n * @param {Array<number|Int_64>} H The intermediate H values from a previous\n *   round\n * @param {string} variant The desired SHA-2 variant\n * @return {Array<number|Int_64>} The resulting H values\n */\nfunction roundSHA2(block, H, variant) {\n    var a, b, c, d, e, f, g, h, T1, T2, numRounds, t, binaryStringMult,\n        safeAdd_2, safeAdd_4, safeAdd_5, gamma0, gamma1, sigma0, sigma1,\n        ch, maj, Int, W = [], int1, int2, offset, K;\n\n    /* Set up the various function handles and variable for the specific\n     * variant */\n    if ((variant === \"SHA-224\" || variant === \"SHA-256\") &&\n        ((2 & SUPPORTED_ALGS) !== 0)) {\n        /* 32-bit variant */\n        numRounds = 64;\n        binaryStringMult = 1;\n        Int = Number;\n        safeAdd_2 = safeAdd_32_2;\n        safeAdd_4 = safeAdd_32_4;\n        safeAdd_5 = safeAdd_32_5;\n        gamma0 = gamma0_32;\n        gamma1 = gamma1_32;\n        sigma0 = sigma0_32;\n        sigma1 = sigma1_32;\n        maj = maj_32;\n        ch = ch_32;\n        K = K_sha2;\n    } else if ((variant === \"SHA-384\" || variant === \"SHA-512\") &&\n        ((4 & SUPPORTED_ALGS) !== 0)) {\n        /* 64-bit variant */\n        numRounds = 80;\n        binaryStringMult = 2;\n        Int = Int_64;\n        safeAdd_2 = safeAdd_64_2;\n        safeAdd_4 = safeAdd_64_4;\n        safeAdd_5 = safeAdd_64_5;\n        gamma0 = gamma0_64;\n        gamma1 = gamma1_64;\n        sigma0 = sigma0_64;\n        sigma1 = sigma1_64;\n        maj = maj_64;\n        ch = ch_64;\n        K = K_sha512;\n    } else {\n        throw new Error(\"Unexpected error in SHA-2 implementation\");\n    }\n\n    a = H[0];\n    b = H[1];\n    c = H[2];\n    d = H[3];\n    e = H[4];\n    f = H[5];\n    g = H[6];\n    h = H[7];\n\n    for (t = 0; t < numRounds; t += 1) {\n        if (t < 16) {\n            offset = t * binaryStringMult;\n            int1 = (block.length <= offset) ? 0 : block[offset];\n            int2 = (block.length <= offset + 1) ? 0 : block[offset + 1];\n            /* Bit of a hack - for 32-bit, the second term is ignored */\n            W[t] = new Int(int1, int2);\n        } else {\n            W[t] = safeAdd_4(\n                gamma1(W[t - 2]), W[t - 7],\n                gamma0(W[t - 15]), W[t - 16]\n            );\n        }\n\n        T1 = safeAdd_5(h, sigma1(e), ch(e, f, g), K[t], W[t]);\n        T2 = safeAdd_2(sigma0(a), maj(a, b, c));\n        h = g;\n        g = f;\n        f = e;\n        e = safeAdd_2(d, T1);\n        d = c;\n        c = b;\n        b = a;\n        a = safeAdd_2(T1, T2);\n    }\n\n    H[0] = safeAdd_2(a, H[0]);\n    H[1] = safeAdd_2(b, H[1]);\n    H[2] = safeAdd_2(c, H[2]);\n    H[3] = safeAdd_2(d, H[3]);\n    H[4] = safeAdd_2(e, H[4]);\n    H[5] = safeAdd_2(f, H[5]);\n    H[6] = safeAdd_2(g, H[6]);\n    H[7] = safeAdd_2(h, H[7]);\n\n    return H;\n}\n\n/**\n * Finalizes the SHA-2 hash\n *\n * @private\n * @param {Array<number>} remainder Any leftover unprocessed packed ints\n *   that still need to be processed\n * @param {number} remainderBinLen The number of bits in remainder\n * @param {number} processedBinLen The number of bits already\n *   processed\n * @param {Array<number|Int_64>} H The intermediate H values from a previous\n *   round\n * @param {string} variant The desired SHA-2 variant\n * @param {number} outputLen Unused for this variant\n * @return {Array<number>} The array of integers representing the SHA-2\n *   hash of message\n */\nfunction finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, variant, outputLen) {\n    var i, appendedMessageLength, offset, retVal, binaryStringInc, totalLen;\n\n    if ((variant === \"SHA-224\" || variant === \"SHA-256\") &&\n        ((2 & SUPPORTED_ALGS) !== 0)) {\n        /* 32-bit variant */\n        /* The 65 addition is a hack but it works.  The correct number is\n           actually 72 (64 + 8) but the below math fails if\n           remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,\n           \"shorting\" the addition is OK. */\n        offset = (((remainderBinLen + 65) >>> 9) << 4) + 15;\n        binaryStringInc = 16;\n    } else if ((variant === \"SHA-384\" || variant === \"SHA-512\") &&\n        ((4 & SUPPORTED_ALGS) !== 0)) {\n        /* 64-bit variant */\n        /* The 129 addition is a hack but it works.  The correct number is\n           actually 136 (128 + 8) but the below math fails if\n           remainderBinLen + 136 % 1024 = 0. Since remainderBinLen % 8 = 0,\n           \"shorting\" the addition is OK. */\n        offset = (((remainderBinLen + 129) >>> 10) << 5) + 31;\n        binaryStringInc = 32;\n    } else {\n        throw new Error(\"Unexpected error in SHA-2 implementation\");\n    }\n\n    while (remainder.length <= offset) {\n        remainder.push(0);\n    }\n    /* Append '1' at the end of the binary string */\n    remainder[remainderBinLen >>> 5] |= 0x80 << (24 - remainderBinLen % 32);\n    /* Append length of binary string in the position such that the new\n     * length is correct. JavaScript numbers are limited to 2^53 so it's\n     * \"safe\" to treat the totalLen as a 64-bit integer. */\n    totalLen = remainderBinLen + processedBinLen;\n    remainder[offset] = totalLen & 0xFFFFFFFF;\n    /* Bitwise operators treat the operand as a 32-bit number so need to\n     * use hacky division and round to get access to upper 32-ish bits */\n    remainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;\n\n    appendedMessageLength = remainder.length;\n\n    /* This will always be at least 1 full chunk */\n    for (i = 0; i < appendedMessageLength; i += binaryStringInc) {\n        H = roundSHA2(remainder.slice(i, i + binaryStringInc), H, variant);\n    }\n\n    if ((\"SHA-224\" === variant) && ((2 & SUPPORTED_ALGS) !== 0)) {\n        retVal = [\n            H[0], H[1], H[2], H[3],\n            H[4], H[5], H[6]\n        ];\n    } else if ((\"SHA-256\" === variant) && ((2 & SUPPORTED_ALGS) !== 0)) {\n        retVal = H;\n    } else if ((\"SHA-384\" === variant) && ((4 & SUPPORTED_ALGS) !== 0)) {\n        retVal = [\n            H[0].highOrder, H[0].lowOrder,\n            H[1].highOrder, H[1].lowOrder,\n            H[2].highOrder, H[2].lowOrder,\n            H[3].highOrder, H[3].lowOrder,\n            H[4].highOrder, H[4].lowOrder,\n            H[5].highOrder, H[5].lowOrder\n        ];\n    } else if ((\"SHA-512\" === variant) && ((4 & SUPPORTED_ALGS) !== 0)) {\n        retVal = [\n            H[0].highOrder, H[0].lowOrder,\n            H[1].highOrder, H[1].lowOrder,\n            H[2].highOrder, H[2].lowOrder,\n            H[3].highOrder, H[3].lowOrder,\n            H[4].highOrder, H[4].lowOrder,\n            H[5].highOrder, H[5].lowOrder,\n            H[6].highOrder, H[6].lowOrder,\n            H[7].highOrder, H[7].lowOrder\n        ];\n    } else /* This should never be reached */\n    {\n        throw new Error(\"Unexpected error in SHA-2 implementation\");\n    }\n\n    return retVal;\n}\n\n/**\n * Performs a round of SHA-3 hashing over a block\n *\n * @private\n * @param {Array<number>|null} block The binary array representation of the\n *   block to hash\n * @param {Array<Array<Int_64>>} state The binary array representation of the\n *   block to hash\n * @return {Array<Array<Int_64>>} The resulting state value\n */\nfunction roundSHA3(block, state) {\n    var round, x, y, B, C = [], D = [];\n\n    if (null !== block) {\n        for (x = 0; x < block.length; x += 2) {\n            state[(x >>> 1) % 5][((x >>> 1) / 5) | 0] = xor_64_2(\n                state[(x >>> 1) % 5][((x >>> 1) / 5) | 0],\n                new Int_64(block[x + 1], block[x])\n            );\n        }\n    }\n\n    for (round = 0; round < 24; round += 1) {\n        /* getNewState doesn't care about variant beyond SHA3 so feed it a\n           value that triggers the getNewState \"if\" statement\n        */\n        B = getNewState(\"SHA3-\");\n\n        /* Perform theta step */\n        for (x = 0; x < 5; x += 1) {\n            C[x] = xor_64_5(state[x][0], state[x][1], state[x][2],\n                state[x][3], state[x][4]);\n        }\n        for (x = 0; x < 5; x += 1) {\n            D[x] = xor_64_2(C[(x + 4) % 5], rotl_64(C[(x + 1) % 5], 1));\n        }\n        for (x = 0; x < 5; x += 1) {\n            for (y = 0; y < 5; y += 1) {\n                state[x][y] = xor_64_2(state[x][y], D[x]);\n            }\n        }\n\n        /* Perform combined ro and pi steps */\n        for (x = 0; x < 5; x += 1) {\n            for (y = 0; y < 5; y += 1) {\n                B[y][(2 * x + 3 * y) % 5] = rotl_64(\n                    state[x][y],\n                    r_sha3[x][y]\n                );\n            }\n        }\n\n        /* Perform chi step */\n        for (x = 0; x < 5; x += 1) {\n            for (y = 0; y < 5; y += 1) {\n                state[x][y] = xor_64_2(\n                    B[x][y],\n                    new Int_64(\n                        ~(B[(x + 1) % 5][y].highOrder) & B[(x + 2) % 5][y].highOrder,\n                        ~(B[(x + 1) % 5][y].lowOrder) & B[(x + 2) % 5][y].lowOrder\n                    )\n                );\n            }\n        }\n\n        /* Perform iota step */\n        state[0][0] = xor_64_2(state[0][0], rc_sha3[round]);\n    }\n\n    return state;\n}\n\n/**\n * Finalizes the SHA-3 hash\n *\n * @private\n * @param {Array<number>} remainder Any leftover unprocessed packed ints\n *   that still need to be processed\n * @param {number} remainderBinLen The number of bits in remainder\n * @param {number} processedBinLen The number of bits already\n *   processed\n * @param {Array<Array<Int_64>>} state The state from a previous round\n * @param {number} blockSize The block size/rate of the variant in bits\n * @param {number} delimiter The delimiter value for the variant\n * @param {number} outputLen The output length for the variant in bits\n * @return {Array<number>} The array of integers representing the SHA-3\n *   hash of message\n */\nfunction finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, blockSize, delimiter, outputLen) {\n    var i, retVal = [], binaryStringInc = blockSize >>> 5, state_offset = 0,\n        remainderIntLen = remainderBinLen >>> 5, temp;\n\n\n    /* Process as many blocks as possible, some may be here for multiple rounds\n       with SHAKE\n    */\n    for (i = 0; i < remainderIntLen && remainderBinLen >= blockSize; i += binaryStringInc) {\n        state = roundSHA3(remainder.slice(i, i + binaryStringInc), state);\n        remainderBinLen -= blockSize;\n    }\n\n    remainder = remainder.slice(i);\n    remainderBinLen = remainderBinLen % blockSize;\n\n    /* Pad out the remainder to a full block */\n    while (remainder.length < binaryStringInc) {\n        remainder.push(0);\n    }\n\n    /* Find the next \"empty\" byte for the 0x80 and append it via an xor */\n    i = remainderBinLen >>> 3;\n    remainder[i >> 2] ^= delimiter << (8 * (i % 4));\n\n    remainder[binaryStringInc - 1] ^= 0x80000000;\n    state = roundSHA3(remainder, state);\n\n    while (retVal.length * 32 < outputLen) {\n        temp = state[state_offset % 5][(state_offset / 5) | 0];\n        retVal.push(temp.lowOrder);\n        if (retVal.length * 32 >= outputLen) {\n            break;\n        }\n        retVal.push(temp.highOrder);\n        state_offset += 1;\n\n        if (0 === ((state_offset * 64) % blockSize)) {\n            roundSHA3(null, state);\n        }\n    }\n\n    return retVal;\n}\n\n/**\n * jsSHA is the workhorse of the library.  Instantiate it with the string to\n * be hashed as the parameter\n *\n * @constructor\n * @this {jsSHA}\n * @param {string} variant The desired SHA variant (SHA-1, SHA-224, SHA-256,\n *   SHA-384, SHA-512, SHA3-224, SHA3-256, SHA3-384, or SHA3-512)\n * @param {string} inputFormat The format of srcString: HEX, TEXT, B64,\n *   BYTES, or ARRAYBUFFER\n * @param {{encoding: (string|undefined), numRounds: (number|undefined)}=}\n *   options Optional values\n */\nconst jsSHA = function (variant, inputFormat, options) {\n    var processedLen = 0, remainder = [], remainderLen = 0, utfType,\n        intermediateState, converterFunc, shaVariant = variant, outputBinLen,\n        variantBlockSize, roundFunc, finalizeFunc, stateCloneFunc,\n        hmacKeySet = false, keyWithIPad = [], keyWithOPad = [], numRounds,\n        updatedCalled = false, inputOptions, isSHAKE = false, bigEndianMod = -1;\n\n    inputOptions = options || {};\n    utfType = inputOptions[\"encoding\"] || \"UTF8\";\n    numRounds = inputOptions[\"numRounds\"] || 1;\n\n    if ((numRounds !== parseInt(numRounds, 10)) || (1 > numRounds)) {\n        throw new Error(\"numRounds must a integer >= 1\");\n    }\n\n    if ((\"SHA-1\" === shaVariant) && ((1 & SUPPORTED_ALGS) !== 0)) {\n        variantBlockSize = 512;\n        roundFunc = roundSHA1;\n        finalizeFunc = finalizeSHA1;\n        outputBinLen = 160;\n        stateCloneFunc = function (state) {\n            return state.slice();\n        };\n    } else if ((shaVariant.lastIndexOf(\"SHA-\", 0) === 0) && ((6 & SUPPORTED_ALGS) !== 0)) {\n        roundFunc = function (block, H) {\n            return roundSHA2(block, H, shaVariant);\n        };\n        finalizeFunc = function (remainder, remainderBinLen, processedBinLen, H, outputLen) {\n            return finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, shaVariant, outputLen);\n        };\n        stateCloneFunc = function (state) {\n            return state.slice();\n        };\n\n        if ((\"SHA-224\" === shaVariant) && ((2 & SUPPORTED_ALGS) !== 0)) {\n            variantBlockSize = 512;\n            outputBinLen = 224;\n        } else if ((\"SHA-256\" === shaVariant) && ((2 & SUPPORTED_ALGS) !== 0)) {\n            variantBlockSize = 512;\n            outputBinLen = 256;\n        } else if ((\"SHA-384\" === shaVariant) && ((4 & SUPPORTED_ALGS) !== 0)) {\n            variantBlockSize = 1024;\n            outputBinLen = 384;\n        } else if ((\"SHA-512\" === shaVariant) && ((4 & SUPPORTED_ALGS) !== 0)) {\n            variantBlockSize = 1024;\n            outputBinLen = 512;\n        } else {\n            throw new Error(\"Chosen SHA variant is not supported\");\n        }\n    } else if (((shaVariant.lastIndexOf(\"SHA3-\", 0) === 0) || (shaVariant.lastIndexOf(\"SHAKE\", 0) === 0)) &&\n        ((8 & SUPPORTED_ALGS) !== 0)) {\n        var delimiter = 0x06;\n\n        roundFunc = roundSHA3;\n        stateCloneFunc = function (state) {\n            return cloneSHA3State(state);\n        };\n        bigEndianMod = 1;\n\n        if (\"SHA3-224\" === shaVariant) {\n            variantBlockSize = 1152;\n            outputBinLen = 224;\n\n        } else if (\"SHA3-256\" === shaVariant) {\n            variantBlockSize = 1088;\n            outputBinLen = 256;\n        } else if (\"SHA3-384\" === shaVariant) {\n            variantBlockSize = 832;\n            outputBinLen = 384;\n        } else if (\"SHA3-512\" === shaVariant) {\n            variantBlockSize = 576;\n            outputBinLen = 512;\n        } else if (\"SHAKE128\" === shaVariant) {\n            variantBlockSize = 1344;\n            outputBinLen = -1;\n            delimiter = 0x1F;\n            isSHAKE = true;\n        } else if (\"SHAKE256\" === shaVariant) {\n            variantBlockSize = 1088;\n            outputBinLen = -1;\n            delimiter = 0x1F;\n            isSHAKE = true;\n        } else {\n            throw new Error(\"Chosen SHA variant is not supported\");\n        }\n        finalizeFunc = function (remainder, remainderBinLen, processedBinLen, state, outputLen) {\n            return finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, variantBlockSize, delimiter, outputLen);\n        };\n    } else {\n        throw new Error(\"Chosen SHA variant is not supported\");\n    }\n    converterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);\n    intermediateState = getNewState(shaVariant);\n\n    /**\n     * Sets the HMAC key for an eventual getHMAC call.  Must be called\n     * immediately after jsSHA object instantiation\n     *\n     * @expose\n     * @param {string|ArrayBuffer} key The key used to calculate the HMAC\n     * @param {string} inputFormat The format of key, HEX, TEXT, B64, BYTES,\n     *   or ARRAYBUFFER\n     * @param {{encoding : (string|undefined)}=} options Associative array\n     *   of input format options\n     */\n    this.setHMACKey = function (key, inputFormat, options) {\n        var keyConverterFunc, convertRet, keyBinLen, keyToUse, blockByteSize,\n            i, lastArrayIndex, keyOptions;\n\n        if (true === hmacKeySet) {\n            throw new Error(\"HMAC key already set\");\n        }\n\n        if (true === updatedCalled) {\n            throw new Error(\"Cannot set HMAC key after calling update\");\n        }\n\n        if ((isSHAKE === true) && ((8 & SUPPORTED_ALGS) !== 0)) {\n            throw new Error(\"SHAKE is not supported for HMAC\");\n        }\n\n        keyOptions = options || {};\n        utfType = keyOptions[\"encoding\"] || \"UTF8\";\n\n        keyConverterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);\n\n        convertRet = keyConverterFunc(key);\n        keyBinLen = convertRet[\"binLen\"];\n        keyToUse = convertRet[\"value\"];\n\n        blockByteSize = variantBlockSize >>> 3;\n\n        /* These are used multiple times, calculate and store them */\n        lastArrayIndex = (blockByteSize / 4) - 1;\n\n        /* Figure out what to do with the key based on its size relative to\n         * the hash's block size */\n        if (blockByteSize < (keyBinLen / 8)) {\n\n            keyToUse = finalizeFunc(keyToUse, keyBinLen, 0, getNewState(shaVariant), outputBinLen);\n            /* For all variants, the block size is bigger than the output\n             * size so there will never be a useful byte at the end of the\n             * string */\n            while (keyToUse.length <= lastArrayIndex) {\n                keyToUse.push(0);\n            }\n            keyToUse[lastArrayIndex] &= 0xFFFFFF00;\n        } else if (blockByteSize > (keyBinLen / 8)) {\n            /* If the blockByteSize is greater than the key length, there\n             * will always be at LEAST one \"useless\" byte at the end of the\n             * string */\n            while (keyToUse.length <= lastArrayIndex) {\n                keyToUse.push(0);\n            }\n            keyToUse[lastArrayIndex] &= 0xFFFFFF00;\n        }\n\n        /* Create ipad and opad */\n        for (i = 0; i <= lastArrayIndex; i += 1) {\n            keyWithIPad[i] = keyToUse[i] ^ 0x36363636;\n            keyWithOPad[i] = keyToUse[i] ^ 0x5C5C5C5C;\n        }\n\n        intermediateState = roundFunc(keyWithIPad, intermediateState);\n        processedLen = variantBlockSize;\n\n        hmacKeySet = true;\n    };\n\n    /**\n     * Takes strString and hashes as many blocks as possible.  Stores the\n     * rest for either a future update or getHash call.\n     *\n     * @expose\n     * @param {string|ArrayBuffer} srcString The string to be hashed\n     */\n    this.update = function (srcString) {\n        var convertRet, chunkBinLen, chunkIntLen, chunk, i, updateProcessedLen = 0,\n            variantBlockIntInc = variantBlockSize >>> 5;\n\n        convertRet = converterFunc(srcString, remainder, remainderLen);\n        chunkBinLen = convertRet[\"binLen\"];\n        chunk = convertRet[\"value\"];\n\n        chunkIntLen = chunkBinLen >>> 5;\n        for (i = 0; i < chunkIntLen; i += variantBlockIntInc) {\n            if (updateProcessedLen + variantBlockSize <= chunkBinLen) {\n                intermediateState = roundFunc(\n                    chunk.slice(i, i + variantBlockIntInc),\n                    intermediateState\n                );\n                updateProcessedLen += variantBlockSize;\n            }\n        }\n        processedLen += updateProcessedLen;\n        remainder = chunk.slice(updateProcessedLen >>> 5);\n        remainderLen = chunkBinLen % variantBlockSize;\n        updatedCalled = true;\n\n    };\n\n    /**\n     * Returns the desired SHA hash of the string specified at instantiation\n     * using the specified parameters\n     *\n     * @expose\n     * @param {string} format The desired output formatting (B64, HEX,\n     *   BYTES, or ARRAYBUFFER)\n     * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),\n     *   shakeLen : (number|undefined)}=} options Hash list of output formatting options\n     * @return {string|ArrayBuffer} The string representation of the hash\n     *   in the format specified.\n     */\n    this.getHash = function (format, options) {\n        var formatFunc, i, outputOptions, finalizedState;\n\n        if (true === hmacKeySet) {\n            throw new Error(\"Cannot call getHash after setting HMAC key\");\n        }\n\n        outputOptions = getOutputOpts(options);\n\n        if ((isSHAKE === true) && ((8 & SUPPORTED_ALGS) !== 0)) {\n            if (outputOptions[\"shakeLen\"] === -1) {\n                throw new Error(\"shakeLen must be specified in options\");\n            }\n            outputBinLen = outputOptions[\"shakeLen\"];\n        }\n\n        /* Validate the output format selection */\n        switch (format) {\n            case \"HEX\":\n                formatFunc = function (binarray) {\n                    return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);\n                };\n                break;\n            case \"B64\":\n                formatFunc = function (binarray) {\n                    return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);\n                };\n                break;\n            case \"BYTES\":\n                formatFunc = function (binarray) {\n                    return packed2bytes(binarray, outputBinLen, bigEndianMod);\n                };\n                break;\n            case \"ARRAYBUFFER\":\n                try {\n                    i = new ArrayBuffer(0);\n                } catch (ignore) {\n                    throw new Error(\"ARRAYBUFFER not supported by this environment\");\n                }\n                formatFunc = function (binarray) {\n                    return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);\n                };\n                break;\n            default:\n                throw new Error(\"format must be HEX, B64, BYTES, or ARRAYBUFFER\");\n        }\n\n        finalizedState = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);\n        for (i = 1; i < numRounds; i += 1) {\n            /* This weird fix-up is only for the case of SHAKE algorithms\n             * and outputBinLen is not a multiple of 32.  In this case, the\n             * very last block of finalizedState has data that needs to be\n             * ignored because all the finalizeFunc calls need to have\n             * unneeded bits set to 0.\n             */\n            if (((8 & SUPPORTED_ALGS) !== 0) && (isSHAKE === true) && (outputBinLen % 32 !== 0)) {\n                finalizedState[finalizedState.length - 1] &= 0x00FFFFFF >>> 24 - (outputBinLen % 32);\n            }\n            finalizedState = finalizeFunc(finalizedState, outputBinLen, 0, getNewState(shaVariant), outputBinLen);\n        }\n\n        return formatFunc(finalizedState);\n    };\n\n    /**\n     * Returns the the HMAC in the specified format using the key given by\n     * a previous setHMACKey call.\n     *\n     * @expose\n     * @param {string} format The desired output formatting\n     *   (B64, HEX, BYTES, or ARRAYBUFFER)\n     * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),\n     *   shakeLen : (number|undefined)}=} options associative array of output\n     *   formatting options\n     * @return {string|ArrayBuffer} The string representation of the hash in the\n     *   format specified.\n     */\n    this.getHMAC = function (format, options) {\n        var formatFunc, firstHash, outputOptions, finalizedState;\n\n        if (false === hmacKeySet) {\n            throw new Error(\"Cannot call getHMAC without first setting HMAC key\");\n        }\n\n        outputOptions = getOutputOpts(options);\n\n        /* Validate the output format selection */\n        switch (format) {\n            case \"HEX\":\n                formatFunc = function (binarray) {\n                    return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);\n                };\n                break;\n            case \"B64\":\n                formatFunc = function (binarray) {\n                    return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);\n                };\n                break;\n            case \"BYTES\":\n                formatFunc = function (binarray) {\n                    return packed2bytes(binarray, outputBinLen, bigEndianMod);\n                };\n                break;\n            case \"ARRAYBUFFER\":\n                try {\n                    formatFunc = new ArrayBuffer(0);\n                } catch (ignore) {\n                    throw new Error(\"ARRAYBUFFER not supported by this environment\");\n                }\n                formatFunc = function (binarray) {\n                    return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);\n                };\n                break;\n            default:\n                throw new Error(\"outputFormat must be HEX, B64, BYTES, or ARRAYBUFFER\");\n        }\n\n        firstHash = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);\n        finalizedState = roundFunc(keyWithOPad, getNewState(shaVariant));\n        finalizedState = finalizeFunc(firstHash, outputBinLen, variantBlockSize, finalizedState, outputBinLen);\n\n        return formatFunc(finalizedState);\n    };\n};\n\nexport { jsSHA }","import React from 'react'\nimport css from './Tweet.module.css'\n\nexport const Tweet = ({tweet}) => {\n  if (tweet === undefined) {\n    return(<span>loading...</span>);\n  }\n  return (\n    <div className={css.tweet}>\n      <div className={css.col1}>\n        {/* AVATAR */}\n        <img src={tweet.avatar} alt='avatar'/>\n      </div>\n\n      <div className={css.col2}>\n        <div className={css.row1}>\n          <span className={css.name}>{tweet.name}</span>\n          <span className={css.time}>{tweet.createdAt}</span>\n        </div>\n\n        <div className={css.row2}>\n          <span className={css.screenName}>{tweet.screenName}</span>\n        </div>\n\n        <div className={css.row3}>\n          <span className={css.text}>{tweet.text}</span>\n        </div>\n        <img src={tweet.image}/>        \n      </div>\n    </div>  \n    )\n}","import React from 'react'\n\nimport SwipeableViews from 'react-swipeable-views';\nimport { virtualize } from 'react-swipeable-views-utils';\nimport bindKeyboard from '../../../util/bindKeyboard'\nimport { Tweet } from '../Tweet/Tweet'\n\nconst VirtualizeSwipeableViews = bindKeyboard(virtualize(SwipeableViews));\n\nexport default class TweetListPage extends React.Component {\n\n    state = {\n        index: 0,\n        tweets: []\n    };\n\n    handleChangeIndex = index => {\n        this.setState({\n            index,\n        });\n    };\n\n    componentWillMount() {\n        const tweets = [];\n        for (let i = 0; i < 7; i++) {\n            tweets.push(\n                {\n                    avatar: \"https://xenforo.com/community/data/avatars/m/0/521.jpg?1566093776\",\n                    name: \"Hello world\",\n                    screenName: \"@hello_world\",\n                    createdAt: \"Last Minute\",\n                    image: \"https://www.w3schools.com/w3css/img_snowtops.jpg\",\n                    text: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation Ut enim ad minim veniam, quis nostrud exercitation\"\n                }\n            );\n        }\n        this.setState({\n            tweets,\n        })\n    }\n\n    componentDidMount() {\n        // Focus to the anchor, press 'Enter' should open a new webpage\n        this.anchor && this.anchor.focus();\n    }\n\n    slideRenderer = (params) => {\n        const { index, key } = params;\n        const tweets = this.state.tweets;\n        const tweet = tweets[index & tweets.length];\n        return (<Tweet tweet={tweet} key={index}/>);\n    };\n\n    render() {\n        const styles = {\n            slideContainer: {\n                height: '100vh',\n            }\n        };\n\n        const tweetsLoaded =  this.state.tweets && this.state.tweets.length > 0;\n        return (\n            <div className=\"app\">\n                {tweetsLoaded?\n                    <VirtualizeSwipeableViews\n                        disabled={true}\n                        disableLazyLoading={false}\n                        ignoreNativeScroll={false}\n                        containerStyle={styles.slideContainer}\n                        index={this.state.index}\n                        onChangeIndex={this.handleChangeIndex}\n                        slideRenderer={this.slideRenderer}\n                        axis=\"x\" /> : <span>Loading...</span>}\n            </div>\n        );\n    }\n}","const utils = {\n    /**\n     * Convert a query param string to a key-value JSON object\n     * @param {string} query \n     * @return the param object\n     */\n    queryStringToObject: function (query) {\n        let parameters = {};\n        const parts = query.split(\"&\");\n        for (let part of parts) {\n            const pair = part.split(\"=\");\n            parameters[pair[0]] = pair[1];\n        }\n        return parameters;\n    },\n\n    /**\n     * Generate a acronym representing the difference between current \n     * datetime and the creation datetime of the tweet\n     * \n     * Difference < 1 minute, => `now`\n     * Difference > 1 minute and < 2 minutes, => `1m`\n     * Difference > 2 minute and < 1 hour, => `xm`\n     * Difference > 1 hour and < 2 hours, => `1h`\n     * Difference > 2 hours and < 1 day, => `xh`\n     * Difference == 1 day, => `YSTD`\n     * Difference > 1 day and < 1 week, => `xd`\n     * Difference > 1 week and < 1 month, => `xw`\n     * \n     * @param {long} time the creation datetime of the tweet\n     * @return the acronym string\n     */\n    prettyDate: function (time) {\n        const date = new Date(time);\n        const diff = (((new Date()).getTime() - date.getTime()) / 1000);\n        const day_diff = Math.floor(diff / 86400);\n\n        if (isNaN(day_diff) || day_diff < 0 || day_diff >= 31)\n            return;\n\n        return day_diff == 0 && (\n            diff < 60 && \"now\" ||\n            diff < 120 && \"1m\" ||\n            diff < 3600 && Math.floor(diff / 60) + \"m\" ||\n            diff < 7200 && \"1h\" ||\n            diff < 86400 && Math.floor(diff / 3600) + \"h\") ||\n            day_diff == 1 && \"YSTD\" ||\n            day_diff < 7 && day_diff + \"d\" ||\n            day_diff < 31 && Math.ceil(day_diff / 7) + \"w\";\n    }\n};\n\nexport {utils}","const consumerKey = \"zuxLaKvzfTWTPBZ15eB4ZfzvB\";\nconst consumerSecret = \"tRjGI1h293fJRUqPyvthCNH3ToNxs7l66P47Sh3JeTzClulf65\";\n\nexport {consumerKey, consumerSecret}","// Inspired by: https://github.com/davidchambers/Base64.js/blob/master/base64.js\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst Base64 = {\n  btoa: (input = '')  => {\n    let str = input;\n    let output = '';\n\n    for (let block = 0, charCode, i = 0, map = chars;\n    str.charAt(i | 0) || (map = '=', i % 1);\n    output += map.charAt(63 & block >> 8 - i % 1 * 8)) {\n\n      charCode = str.charCodeAt(i += 3/4);\n\n      if (charCode > 0xFF) {\n        throw new Error(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n      }\n\n      block = block << 8 | charCode;\n    }\n\n    return output;\n  },\n};\n\nexport { Base64 };","\n//import {settingsStorage} from \"settings\";\nimport {jsSHA} from \"./sha1\";\nimport {consumerKey, consumerSecret} from \"../credentials\";\nimport {Base64} from \"./base64\";\n\n/**\n * For Request Token\n */\n\n// Twitter authorization See https://imagineer.in/blog/authorizing-twitter-api-calls-in-javascript/\nfunction getAuthorizationForRequestToken(httpMethod, baseUrl, fitbitAppCallback) {\n\n    // timestamp as unix epoch\n    let timestamp = Math.round(Date.now() / 1000);\n    // nonce as base64 encoded unique random string\n    let nonce = Base64.btoa(consumerKey + ':' + timestamp);\n    let callback = encodeURIComponent(`https://app-settings.fitbitdevelopercontent.com/simple-redirect.html?state=${encodeURIComponent(fitbitAppCallback)}`);\n    // generate signature from base string & signing key\n    let baseString = oAuthBaseStringForRequestToken(httpMethod, baseUrl, consumerKey, timestamp, nonce, callback);\n    let signingKey = oAuthSigningKey(consumerSecret);\n    let signature = oAuthSignature(baseString, signingKey);\n\n    // return interpolated string\n    return 'OAuth ' +\n        'oauth_consumer_key=\"' + consumerKey + '\", ' +\n        'oauth_nonce=\"' + nonce + '\", ' +\n        'oauth_signature=\"' + signature + '\", ' +\n        'oauth_signature_method=\"HMAC-SHA1\", ' +\n        'oauth_timestamp=\"' + timestamp + '\", ' +\n        'oauth_callback=\"' + callback + '\", ' +\n        'oauth_version=\"1.0\"';\n}\n\nfunction oAuthBaseStringForRequestToken(method, url, key, timestamp, nonce, callback) {\n    return method\n        + '&' + percentEncode(url)\n        + '&' + percentEncode(genSortedParamStrForRequestToken(key, timestamp, nonce, callback));\n}\n\n// Generate Sorted Parameter String for base string params\nfunction genSortedParamStrForRequestToken(key, timestamp, nonce, callback) {\n    let paramObj = {\n        oauth_callback: callback,\n        oauth_consumer_key: key,\n        oauth_nonce: nonce,\n        oauth_signature_method: 'HMAC-SHA1',\n        oauth_timestamp: timestamp,\n        oauth_version: '1.0'\n    };\n    return encodeObjectToParamStr(paramObj)\n}\n\n/**\n * For Access Token\n */\n\nfunction getAuthorizationForAccessToken(httpMethod, baseUrl, requestToken, verifier) {\n\n    let timestamp = Math.round(Date.now() / 1000);\n    // nonce as base64 encoded unique random string\n    let nonce = Base64.btoa(consumerKey + ':' + timestamp);\n    // generate signature from base string & signing key\n    let baseString = oAuthBaseStringForAccessToken(httpMethod, baseUrl, consumerKey, timestamp.nonce, requestToken, verifier);\n    let signingKey = oAuthSigningKey(consumerSecret);\n    let signature = oAuthSignature(baseString, signingKey);\n\n    // return interpolated string\n    return 'OAuth ' +\n        'oauth_consumer_key=\"' + consumerKey + '\", ' +\n        'oauth_nonce=\"' + nonce + '\", ' +\n        'oauth_signature=\"' + signature + '\", ' +\n        'oauth_signature_method=\"HMAC-SHA1\", ' +\n        'oauth_timestamp=\"' + timestamp + '\", ' +\n        'oauth_token=\"' + requestToken + '\", ' +\n        'oauth_verifier=\"' + verifier + '\", ' +\n        'oauth_version=\"1.0\"';\n}\n\nfunction oAuthBaseStringForAccessToken(method, url, key, timestamp, nonce, requestToken, verifier) {\n    return method\n        + '&' + percentEncode(url)\n        + '&' + percentEncode(genSortedParamStrForAccessToken(key, timestamp, nonce, requestToken, verifier));\n}\n\nfunction genSortedParamStrForAccessToken(key, timestamp, nonce, token, verifier) {\n    let paramObj = {\n        oauth_consumer_key: key,\n        oauth_nonce: nonce,\n        oauth_signature_method: 'HMAC-SHA1',\n        oauth_timestamp: timestamp,\n        oauth_token: token,\n        oauth_verifier: verifier,\n        oauth_version: '1.0'\n\n    };\n    return encodeObjectToParamStr(paramObj)\n}\n\n\n/**\n * For Home Timeline\n */\n\nfunction getAuthorizationForProtectedResource(httpMethod, baseUrl, accessToken, accessTokenSecret, additionalParams) {\n    // timestamp as unix epoch\n    let timestamp = Math.round(Date.now() / 1000);\n    // nonce as base64 encoded unique random string\n    let nonce = Base64.btoa(consumerKey + ':' + timestamp);\n\n    // generate signature from base string & signing key\n    let baseString = oAuthBaseStringForProtectedResource(httpMethod, baseUrl, consumerKey, timestamp, nonce, accessToken, additionalParams);\n    let signingKey = oAuthSigningKeyWithAccessTokenScrect(consumerSecret, accessTokenSecret);\n    let signature = oAuthSignature(baseString, signingKey);\n\n    // return interpolated string\n    return 'OAuth ' +\n        'oauth_consumer_key=\"' + consumerKey + '\", ' +\n        'oauth_nonce=\"' + nonce + '\", ' +\n        'oauth_signature=\"' + signature + '\", ' +\n        'oauth_signature_method=\"HMAC-SHA1\", ' +\n        'oauth_timestamp=\"' + timestamp + '\", ' +\n        'oauth_token=\"' + accessToken + '\", ' +\n        'oauth_version=\"1.0\"';\n}\n\nfunction oAuthBaseStringForProtectedResource(method, url, key, timestamp, nonce, accessToken, additionalParams) {\n    return method\n        + '&' + percentEncode(url)\n        + '&' + percentEncode(genSortedParamStrForProtectedResource(key, timestamp, nonce, accessToken, additionalParams));\n}\n\nfunction genSortedParamStrForProtectedResource(key, timestamp, nonce, accessToken, additionalParams) {\n    let paramObj = {\n        oauth_consumer_key: key,\n        oauth_nonce: nonce,\n        oauth_signature_method: 'HMAC-SHA1',\n        oauth_timestamp: timestamp,\n        oauth_token: accessToken,\n        oauth_version: '1.0'\n    };\n\n    if (additionalParams) {\n        paramObj = {...paramObj, ...additionalParams};\n    }\n    return encodeObjectToParamStr(paramObj)\n}\n\n/*\n * Common Functions\n */\n\nfunction oAuthSigningKey(consumer_secret) {\n    return percentEncode(consumer_secret) + '&';\n}\n\nfunction oAuthSigningKeyWithAccessTokenScrect(consumer_secret, access_token_secret) {\n    return percentEncode(consumer_secret) + '&' + percentEncode(access_token_secret);\n}\n\nfunction oAuthSignature(base_string, signing_key) {\n    const signature = hmac_sha1(base_string, signing_key);\n    return percentEncode(signature);\n}\n\n// Percent encoding\nfunction percentEncode(str) {\n    return encodeURIComponent(str).replace(/[!*()']/g, (character) => {\n        return '%' + character.charCodeAt(0).toString(16);\n    });\n}\n\nfunction hmac_sha1(string, secret) {\n    let shaObj = new jsSHA(\"SHA-1\", \"TEXT\");\n    shaObj.setHMACKey(secret, \"TEXT\");\n    shaObj.update(string);\n    return shaObj.getHMAC(\"B64\");\n}\n\nfunction encodeObjectToParamStr(paramObj) {\n    // Sort alphabetically\n    let paramObjKeys = Object.keys(paramObj);\n    let len = paramObjKeys.length;\n    paramObjKeys.sort();\n    // Interpolate to string with format as key1=val1&key2=val2&...\n    let paramStr = paramObjKeys[0] + '=' + paramObj[paramObjKeys[0]];\n    for (var i = 1; i < len; i++) {\n        paramStr += '&' + paramObjKeys[i] + '=' + percentEncode(decodeURIComponent(paramObj[paramObjKeys[i]]));\n    }\n    return paramStr;\n}\n\nconst twitterOAuth = {\n    getAuthorizationForRequestToken, getAuthorizationForAccessToken, getAuthorizationForProtectedResource\n}\n\nexport {twitterOAuth}","import {utils} from \"./utils\";\nimport {twitterOAuth} from \"./twitter_oauth\";\n\nconst requestTokenUrl = \"https://api.twitter.com/oauth/request_token\";\nconst accessTokenUrl = \"https://api.twitter.com/oauth/access_token\";\nconst homeTimelineUrl = \"https://api.twitter.com/1.1/statuses/home_timeline.json\";\nconst likeTweetUrl = \"https://api.twitter.com/1.1/favorites/create.json\";\nconst retweetUrl = \"https://api.twitter.com/1.1/statuses/retweet/:id.json\";\n\nfunction getRequestToken(newCallbackUrl, callback) {\n    // Use this proxy to bypass the cross-origin restriction in the settings page\n    fetch('https://cors-anywhere.herokuapp.com/'+requestTokenUrl, {\n        method: \"POST\",\n        headers: {\n            Authorization: twitterOAuth\n                .getAuthorizationForRequestToken('POST',\n                    requestTokenUrl, newCallbackUrl)\n        }\n    }).then(res => res.text())\n        .then(text => processRequestTokenResultQueryText(text, callback))\n        .catch(error => console.log('Error: ' + error.toLocaleString()));\n}\n\nfunction getAccessToken(token, verifier, callback) {\n    fetch(accessTokenUrl, {\n        method: \"POST\",\n        headers: {\n            Authorization: twitterOAuth\n                .getAuthorizationForAccessToken('POST',\n                    accessTokenUrl, token, verifier),\n        }\n    }).then(res => res.text())\n        .then(text => processAccessTokenResultQueryText(text, callback))\n        .catch(error => console.log('Error: ' + error.toLocaleString()));\n}\n\nfunction getHomeTimeline(accessToken, accessTokenSecret, callback) {\n    fetch(homeTimelineUrl, {\n        method: \"GET\",\n        headers: {\n            Authorization: twitterOAuth\n                .getAuthorizationForProtectedResource('GET', homeTimelineUrl, \n                    accessToken, accessTokenSecret, {})\n        }\n    }).then(res => res.text())\n        .then(text => callback(text))\n        .catch(error => console.log('Error: ' + error.toLocaleString()));\n}\n\nfunction likeTweet(tweetIdToLike, accessToken, accessTokenSecret, callback) {\n    const url = likeTweetUrl + \"?id=\" + tweetIdToLike;\n    fetch(url, {\n        method: \"POST\",\n        headers: {\n            Authorization: twitterOAuth\n                .getAuthorizationForProtectedResource('POST', likeTweetUrl, \n                    accessToken, accessTokenSecret, {id: tweetIdToLike})\n        }\n    }).then(res => res.text())\n        .then(text => callback(text))\n        .catch(error => console.log('Error: ' + error.toLocaleString()));\n}\n\nfunction retweet(tweetIdToRetweet, accessToken, accessTokenSecret, callback) {\n    const url = retweetUrl.replace(':id', tweetIdToRetweet);\n    console.log(url);\n    fetch(url, {\n        method: \"POST\",\n        headers: {\n            Authorization: twitterOAuth\n                .getAuthorizationForProtectedResource('POST', url, \n                    accessToken, accessTokenSecret),\n            'Content-Type': 'application/json'\n        }\n    }).then(res => res.text())\n        .then(text => callback(text))\n        .catch(error => console.log('Error: ' + error.toLocaleString()));\n}\n\n\nfunction processRequestTokenResultQueryText(queryText, callback) {\n    if (queryText) {\n        const result = utils.queryStringToObject(queryText);\n        const token = result['oauth_token'];\n        if (callback) {\n            callback(token);\n        }\n    }\n}\n\nfunction processAccessTokenResultQueryText(queryText, callback) {\n    if (queryText) {\n        const result = utils.queryStringToObject(queryText);\n        const token = result['oauth_token'];\n        const secret = result['oauth_token_secret'];\n        if (callback) {\n            callback(token, secret);\n        }\n    }\n}\n\nconst twitterApi = {\n    getRequestToken, getAccessToken, getHomeTimeline, likeTweet, retweet\n};\n\nexport {twitterApi}","import {twitterApi} from './twitter/twitter_api'\n\nconst callbackUrl = \"https://qichuan.github.io/kaios-twitter-gh\";\n\nfunction isLoggedIn() {\n\n}\n\nfunction performLogin() {\n    twitterApi.getRequestToken(callbackUrl, function (token) {\n        if (token) {\n            console.log(\"found request token \" + token);\n            const url = `https://api.twitter.com/oauth/authenticate?oauth_token=${token}`;\n            //myProps.settingsStorage.setItem(\"oauth_request_token\", token);\n            window.location.href = url;\n        }\n    });\n}\n\nexport {isLoggedIn, performLogin}","import React from 'react'\nimport css from './LoginPage.module.css'\nimport { performLogin } from '../../../util/loginManager'\n\nexport default class LoginPage extends React.Component {\n    render() {\n        return (\n            <div className={css.loginPage}>\n                <div className={css.centered}>\n                    <span className={css.title}>Please Login with your Twitter account</span> \n                    <button className={css.loginButton} onClick={this.onLoginClicked}>Login</button>\n                </div>\n            </div>\n        );\n    }\n\n    onLoginClicked = () => {\n        performLogin();\n    }\n}","import React, { Component } from 'react';\nimport './app.css';\nimport TweetListPage from \"./components/TweetListPage/TweetListPage\";\nimport LoginPage from \"./components/LoginPage/LoginPage\";\nimport { isLoggedIn } from \"../util/loginManager\"\n\nclass App extends Component {\n\n  render() {\n    if (isLoggedIn()) {\n      return (\n        <div className=\"app\">\n          <TweetListPage />\n        </div>\n      );\n    }\n    return (\n      <div className=\"app\">\n        <LoginPage />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// import l10n.js before react modules\nimport 'kaios-gaia-l10n';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './view/app';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('app'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginPage\":\"LoginPage_loginPage__2seOp\",\"centered\":\"LoginPage_centered__2fyrQ\",\"title\":\"LoginPage_title__Hnpyn\",\"loginButton\":\"LoginPage_loginButton__31NGf\"};"],"sourceRoot":""}